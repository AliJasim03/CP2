package GUI;

import Calander.*;
import GlassPanePopup.GlassPanePopup;
import Logic.*;
import java.awt.CardLayout;
import FileManager.*;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.table.DefaultTableModel;
import javax.swing.DefaultCellEditor;

public class MainPage extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form NewJFrame
     */
    CardLayout cardLayout;

    public MainPage() throws IOException, ClassNotFoundException {
        FileManager.getInstance().readEmployees();

        initComponents();
        GlassPanePopup.install(this);

        cardLayout = (CardLayout) (pnlCards.getLayout());

        employeesTable.fixTable(jScrollPane);
        membersTable.fixTable(jScrollPane1);
        membersAssignTrainerTable.fixTable(jScrollPane2);
        personalTrainerTable.fixTable(jScrollPane3);
        trainerMembersTable.fixTable(jScrollPane4);
        dateChooser.addEventDateChooser(new EventDateChooser() {
            @Override
            public void dateSelected(SelectedAction action, SelectedDate date) {
                if (action.getAction() == SelectedAction.DAY_SELECTED) {
                    dateChooser.hidePopup();
                }
            }
        });
        dateChooserEdit.addEventDateChooser(new EventDateChooser() {
            @Override
            public void dateSelected(SelectedAction action, SelectedDate date) {
                if (action.getAction() == SelectedAction.DAY_SELECTED) {
                    dateChooserEdit.hidePopup();
                }
            }
        });
//        membersAssignTrainerTable.getColumnModel().getColumn(3).setCellRenderer(new ComboBoxCellRender());
//        membersAssignTrainerTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new Cope()));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderButtonGroup = new javax.swing.ButtonGroup();
        employeeTypeBtnGroup = new javax.swing.ButtonGroup();
        memberTypeGroupButton = new javax.swing.ButtonGroup();
        genderButtonGroupEdit = new javax.swing.ButtonGroup();
        dateChooser = new Calander.DateChooser();
        dateChooserEdit = new Calander.DateChooser();
        assignedTrainerComboBox = new ComboBox.ComboBoxSuggestion();
        mainPage = new javax.swing.JSplitPane();
        nvigPnl = new javax.swing.JPanel();
        gymImage = new javax.swing.JLabel();
        bahrainLabel = new javax.swing.JLabel();
        polyLabel = new javax.swing.JLabel();
        emoployeeSectionLabel = new javax.swing.JLabel();
        memberSectionLabel = new javax.swing.JLabel();
        dashboardBtn = new GUI.NavButton();
        addEmployeeButton = new GUI.NavButton();
        manageEmployeesButton = new GUI.NavButton();
        listTrainersButton = new GUI.NavButton();
        addMemberButton = new GUI.NavButton();
        manageMemberButton = new GUI.NavButton();
        assignTrainerButton = new GUI.NavButton();
        marketingReportBtn = new GUI.NavButton();
        exitBtn = new GUI.Button();
        pnlCards = new javax.swing.JPanel();
        dashboardPnl = new javax.swing.JPanel();
        addMemberImageBtn = new javax.swing.JButton();
        addEmployeeImageBtn = new javax.swing.JButton();
        assignTrainerImageBtn = new javax.swing.JButton();
        truckMemberInformationImageBtn = new javax.swing.JButton();
        truckEmployeeInformationImageBtn = new javax.swing.JButton();
        addEmployeePnl = new javax.swing.JPanel();
        roundPanel3 = new GUI.RoundPanel();
        javax.swing.JLabel lblAddEmployee = new javax.swing.JLabel();
        javax.swing.JLabel lblFirstNameEmployee = new javax.swing.JLabel();
        javax.swing.JLabel lblEmployeeType = new javax.swing.JLabel();
        javax.swing.JLabel lblPhoneEmployee = new javax.swing.JLabel();
        javax.swing.JLabel lblSurnameEmployee = new javax.swing.JLabel();
        javax.swing.JLabel lblSalary = new javax.swing.JLabel();
        javax.swing.JLabel lblAddressEmployee = new javax.swing.JLabel();
        trainerRadioBtn = new GUI.RadioButtonCustom();
        employeeRadioBtn = new GUI.RadioButtonCustom();
        txtSurnameEmployee = new GUI.TextField();
        txtAddressEmployee = new GUI.TextField();
        txtPhoneEmployee = new GUI.TextField();
        txtSalaryEmployee = new GUI.TextField();
        txtFirstNameEmployee = new GUI.TextField();
        addEmployeeBtn = new GUI.Button();
        clearEmployeeFormBtn = new GUI.Button();
        addMemberPnl = new javax.swing.JPanel();
        roundPanel1 = new GUI.RoundPanel();
        javax.swing.JLabel lblAddMember = new javax.swing.JLabel();
        javax.swing.JLabel lblSurname = new javax.swing.JLabel();
        javax.swing.JLabel lblMemberType = new javax.swing.JLabel();
        javax.swing.JLabel lblGender = new javax.swing.JLabel();
        javax.swing.JLabel lblFirstName = new javax.swing.JLabel();
        javax.swing.JLabel lblPhone = new javax.swing.JLabel();
        lblSportDepartment = new javax.swing.JLabel();
        javax.swing.JLabel lblAdress = new javax.swing.JLabel();
        lblMajorPosition = new javax.swing.JLabel();
        maleBtn = new RadioButtonCustom();
        femaleBtn = new RadioButtonCustom();
        studentBtn = new RadioButtonCustom();
        staffBtn = new RadioButtonCustom();
        txtFirstName = new GUI.TextField();
        txtSurname = new GUI.TextField();
        txtPhone = new GUI.TextField();
        txtSportTeamOrDepartment = new GUI.TextField();
        txtAdress = new GUI.TextField();
        txtMajorOrPosition = new GUI.TextField();
        addMemberBtn = new GUI.Button();
        clearBtn = new GUI.Button();
        txtDob = new GUI.TextField();
        pickDateBtn = new GUI.Button();
        javax.swing.JLabel lblFirstName2 = new javax.swing.JLabel();
        manageEmployeesPnl = new javax.swing.JPanel();
        roundPanel4 = new GUI.RoundPanel();
        jScrollPane = new javax.swing.JScrollPane();
        employeesTable = new Table.Table();
        txtSearchEmp = new GUI.TextField();
        lblSearchIcon = new javax.swing.JLabel();
        editEmployeeBtn = new GUI.Button();
        deleteEmployeeBtn = new GUI.Button();
        manageMemberssPnl = new javax.swing.JPanel();
        roundPanel6 = new GUI.RoundPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        membersTable = new Table.Table();
        txtSearchMember = new GUI.TextField();
        javax.swing.JLabel lblSearchIcon1 = new javax.swing.JLabel();
        editMemberBtn = new GUI.Button();
        deleteMemberBtn = new GUI.Button();
        listPersonalTrainerPnl = new javax.swing.JPanel();
        roundPanel9 = new GUI.RoundPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        personalTrainerTable = new Table.Table();
        txtSearchTrainer = new GUI.TextField();
        lblSearchIcon3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        trainerMembersPnl = new javax.swing.JPanel();
        roundPanel10 = new GUI.RoundPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        trainerMembersTable = new Table.Table();
        txtSearchTrainerMember = new GUI.TextField();
        javax.swing.JLabel lblSearchIcon4 = new javax.swing.JLabel();
        deleteMemberBtn1 = new GUI.Button();
        lblTrainerName = new javax.swing.JLabel();
        assignTrainerPnl = new javax.swing.JPanel();
        roundPanel8 = new GUI.RoundPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        membersAssignTrainerTable = new Table.Table();
        txtSearchMemberTrainer = new GUI.TextField();
        javax.swing.JLabel lblSearchIcon2 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        editEmployeePnl = new javax.swing.JPanel();
        roundPanel5 = new GUI.RoundPanel();
        javax.swing.JLabel lblAddEmployee1 = new javax.swing.JLabel();
        javax.swing.JLabel lblFirstNameEmployee1 = new javax.swing.JLabel();
        javax.swing.JLabel lblEmployeeType1 = new javax.swing.JLabel();
        javax.swing.JLabel lblPhoneEmployee1 = new javax.swing.JLabel();
        javax.swing.JLabel lblSurnameEmployee1 = new javax.swing.JLabel();
        javax.swing.JLabel lblSalary1 = new javax.swing.JLabel();
        javax.swing.JLabel lblAddressEmployee1 = new javax.swing.JLabel();
        trainerRadioBtnEdit = new GUI.RadioButtonCustom();
        employeeRadioBtnEdit = new GUI.RadioButtonCustom();
        txtSurnameEmployeeEdit = new GUI.TextField();
        txtAddressEmployeeEdit = new GUI.TextField();
        txtPhoneEmployeeEdit = new GUI.TextField();
        txtSalaryEmployeeEdit = new GUI.TextField();
        txtFirstNameEmployeeEdit = new GUI.TextField();
        saveEmployeeEditBtn = new GUI.Button();
        backEmployeeEditBtn = new GUI.Button();
        editMemberPnl = new javax.swing.JPanel();
        roundPanel7 = new GUI.RoundPanel();
        javax.swing.JLabel lblAddMember1 = new javax.swing.JLabel();
        javax.swing.JLabel lblSurname1 = new javax.swing.JLabel();
        javax.swing.JLabel lblMemberType1 = new javax.swing.JLabel();
        javax.swing.JLabel lblGender1 = new javax.swing.JLabel();
        javax.swing.JLabel lblFirstName1 = new javax.swing.JLabel();
        javax.swing.JLabel lblPhone1 = new javax.swing.JLabel();
        lblSportDepartmentEdit = new javax.swing.JLabel();
        javax.swing.JLabel lblAdress1 = new javax.swing.JLabel();
        lblMajorPositionEdit = new javax.swing.JLabel();
        maleEditBtn = new RadioButtonCustom();
        femaleEditBtn = new RadioButtonCustom();
        studentEditBtn = new RadioButtonCustom();
        staffEditBtn = new RadioButtonCustom();
        txtFirstNameMemberEdit = new GUI.TextField();
        txtSurNameMemberEdit = new GUI.TextField();
        txtPhoneMemberEdit = new GUI.TextField();
        txtSportTeamOrDepartmentEdit = new GUI.TextField();
        txtAdressMemberEdit = new GUI.TextField();
        txtMajorOrPositionEdit = new GUI.TextField();
        saveMemberBtn = new GUI.Button();
        backMemberBtn = new GUI.Button();
        txtDobEdit = new GUI.TextField();
        pickDateBtn1 = new GUI.Button();
        javax.swing.JLabel lblFirstName3 = new javax.swing.JLabel();

        dateChooser.setForeground(new java.awt.Color(11, 158, 191));

        dateChooserEdit.setForeground(new java.awt.Color(11, 158, 191));
        dateChooserEdit.setTextRefernce(txtDobEdit);

        assignedTrainerComboBox.setEditable(false);
        assignedTrainerComboBox.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                assignedTrainerComboBoxFocusLost(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Gym System\n");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        mainPage.setDividerSize(1);
        mainPage.setPreferredSize(new java.awt.Dimension(960, 540));

        nvigPnl.setBackground(new java.awt.Color(11, 158, 191));
        nvigPnl.setPreferredSize(new java.awt.Dimension(187, 540));

        gymImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        gymImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Gym logo 1.png"))); // NOI18N
        gymImage.setAlignmentY(0.0F);

        bahrainLabel.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        bahrainLabel.setForeground(new java.awt.Color(255, 255, 255));
        bahrainLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bahrainLabel.setText("Bahrain");

        polyLabel.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        polyLabel.setForeground(new java.awt.Color(255, 255, 255));
        polyLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        polyLabel.setText("Polytechnic Gym ");

        emoployeeSectionLabel.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        emoployeeSectionLabel.setForeground(new java.awt.Color(255, 255, 255));
        emoployeeSectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user-alt.png"))); // NOI18N
        emoployeeSectionLabel.setText("Employee Section");
        emoployeeSectionLabel.setIconTextGap(10);

        memberSectionLabel.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        memberSectionLabel.setForeground(new java.awt.Color(255, 255, 255));
        memberSectionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/user-alt.png"))); // NOI18N
        memberSectionLabel.setText("Members section");
        memberSectionLabel.setIconTextGap(10);

        dashboardBtn.setBackground(new java.awt.Color(2, 73, 89));
        dashboardBtn.setForeground(new java.awt.Color(255, 255, 255));
        dashboardBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/dashboardIcon.png"))); // NOI18N
        dashboardBtn.setText("Dashboard");
        dashboardBtn.setFocusPainted(false);
        dashboardBtn.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        dashboardBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        dashboardBtn.setIconTextGap(13);
        dashboardBtn.addActionListener(this);
        dashboardBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dashboardBtnActionPerformed(evt);
            }
        });

        addEmployeeButton.setBackground(new java.awt.Color(11, 158, 191));
        addEmployeeButton.setForeground(new java.awt.Color(255, 255, 255));
        addEmployeeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/more-horizontal-circle.png"))); // NOI18N
        addEmployeeButton.setText("Add Employee");
        addEmployeeButton.setFocusPainted(false);
        addEmployeeButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        addEmployeeButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        addEmployeeButton.setIconTextGap(5);
        addEmployeeButton.addActionListener(this);
        addEmployeeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeButtonActionPerformed(evt);
            }
        });

        manageEmployeesButton.setBackground(new java.awt.Color(11, 158, 191));
        manageEmployeesButton.setForeground(new java.awt.Color(255, 255, 255));
        manageEmployeesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/more-horizontal-circle.png"))); // NOI18N
        manageEmployeesButton.setText("Magage Employees");
        manageEmployeesButton.setFocusPainted(false);
        manageEmployeesButton.setFont(new java.awt.Font("Poppins", 1, 13)); // NOI18N
        manageEmployeesButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        manageEmployeesButton.setIconTextGap(5);
        manageEmployeesButton.setMaximumSize(new java.awt.Dimension(145, 47));
        manageEmployeesButton.setMinimumSize(new java.awt.Dimension(145, 47));
        manageEmployeesButton.setPreferredSize(new java.awt.Dimension(133, 47));
        manageEmployeesButton.addActionListener(this);
        manageEmployeesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageEmployeesButtonActionPerformed(evt);
            }
        });

        listTrainersButton.setBackground(new java.awt.Color(11, 158, 191));
        listTrainersButton.setForeground(new java.awt.Color(255, 255, 255));
        listTrainersButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/more-horizontal-circle.png"))); // NOI18N
        listTrainersButton.setText("Personal Trainers");
        listTrainersButton.setToolTipText("");
        listTrainersButton.setFocusPainted(false);
        listTrainersButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        listTrainersButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        listTrainersButton.setIconTextGap(5);
        listTrainersButton.setMaximumSize(new java.awt.Dimension(145, 47));
        listTrainersButton.setMinimumSize(new java.awt.Dimension(145, 47));
        listTrainersButton.setPreferredSize(new java.awt.Dimension(133, 47));
        listTrainersButton.addActionListener(this);
        listTrainersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listTrainersButtonActionPerformed(evt);
            }
        });

        addMemberButton.setBackground(new java.awt.Color(11, 158, 191));
        addMemberButton.setForeground(new java.awt.Color(255, 255, 255));
        addMemberButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/more-horizontal-circle.png"))); // NOI18N
        addMemberButton.setText("Add Member");
        addMemberButton.setToolTipText("");
        addMemberButton.setFocusPainted(false);
        addMemberButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        addMemberButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        addMemberButton.setIconTextGap(5);
        addMemberButton.setMaximumSize(new java.awt.Dimension(145, 47));
        addMemberButton.setMinimumSize(new java.awt.Dimension(145, 47));
        addMemberButton.setPreferredSize(new java.awt.Dimension(133, 47));
        addMemberButton.addActionListener(this);
        addMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberButtonActionPerformed(evt);
            }
        });

        manageMemberButton.setBackground(new java.awt.Color(11, 158, 191));
        manageMemberButton.setForeground(new java.awt.Color(255, 255, 255));
        manageMemberButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/more-horizontal-circle.png"))); // NOI18N
        manageMemberButton.setText("Magage Members");
        manageMemberButton.setToolTipText("");
        manageMemberButton.setFocusPainted(false);
        manageMemberButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        manageMemberButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        manageMemberButton.setIconTextGap(5);
        manageMemberButton.setMaximumSize(new java.awt.Dimension(145, 47));
        manageMemberButton.setMinimumSize(new java.awt.Dimension(145, 47));
        manageMemberButton.setPreferredSize(new java.awt.Dimension(133, 47));
        manageMemberButton.addActionListener(this);
        manageMemberButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageMemberButtonActionPerformed(evt);
            }
        });

        assignTrainerButton.setBackground(new java.awt.Color(11, 158, 191));
        assignTrainerButton.setForeground(new java.awt.Color(255, 255, 255));
        assignTrainerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/more-horizontal-circle.png"))); // NOI18N
        assignTrainerButton.setText("Assign a trainer");
        assignTrainerButton.setToolTipText("");
        assignTrainerButton.setFocusPainted(false);
        assignTrainerButton.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        assignTrainerButton.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        assignTrainerButton.setIconTextGap(5);
        assignTrainerButton.setMaximumSize(new java.awt.Dimension(145, 47));
        assignTrainerButton.setMinimumSize(new java.awt.Dimension(145, 47));
        assignTrainerButton.setPreferredSize(new java.awt.Dimension(133, 47));
        assignTrainerButton.addActionListener(this);
        assignTrainerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTrainerButtonActionPerformed(evt);
            }
        });

        marketingReportBtn.setBackground(new java.awt.Color(11, 158, 191));
        marketingReportBtn.setForeground(new java.awt.Color(255, 255, 255));
        marketingReportBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/note-text.png"))); // NOI18N
        marketingReportBtn.setText("Marketing report");
        marketingReportBtn.setToolTipText("");
        marketingReportBtn.setFocusPainted(false);
        marketingReportBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        marketingReportBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEADING);
        marketingReportBtn.setIconTextGap(10);
        marketingReportBtn.setMaximumSize(new java.awt.Dimension(145, 47));
        marketingReportBtn.setMinimumSize(new java.awt.Dimension(145, 47));
        marketingReportBtn.setPreferredSize(new java.awt.Dimension(133, 47));
        assignTrainerButton.addActionListener(this);
        marketingReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marketingReportBtnActionPerformed(evt);
            }
        });

        exitBtn.setBackground(new java.awt.Color(255, 67, 67));
        exitBtn.setForeground(new java.awt.Color(255, 255, 255));
        exitBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/log-out (2).png"))); // NOI18N
        exitBtn.setText("Exit");
        exitBtn.setFocusPainted(false);
        exitBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        exitBtn.setIconTextGap(10);
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout nvigPnlLayout = new javax.swing.GroupLayout(nvigPnl);
        nvigPnl.setLayout(nvigPnlLayout);
        nvigPnlLayout.setHorizontalGroup(
            nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMemberButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageMemberButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(assignTrainerButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nvigPnlLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(dashboardBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, nvigPnlLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(marketingReportBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(nvigPnlLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(nvigPnlLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(polyLabel)
                            .addComponent(bahrainLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(gymImage, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(listTrainersButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(manageEmployeesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addEmployeeButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(nvigPnlLayout.createSequentialGroup()
                        .addGroup(nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memberSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emoployeeSectionLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );

        nvigPnlLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {bahrainLabel, polyLabel});

        nvigPnlLayout.setVerticalGroup(
            nvigPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nvigPnlLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gymImage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bahrainLabel)
                .addGap(0, 0, 0)
                .addComponent(polyLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dashboardBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(emoployeeSectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addEmployeeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageEmployeesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listTrainersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(memberSectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageMemberButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(assignTrainerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(marketingReportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(exitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        mainPage.setLeftComponent(nvigPnl);

        pnlCards.setBackground(new java.awt.Color(2, 73, 89));
        pnlCards.setPreferredSize(new java.awt.Dimension(773, 540));
        pnlCards.setLayout(new java.awt.CardLayout());

        dashboardPnl.setBackground(new java.awt.Color(2, 73, 89));
        dashboardPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        addMemberImageBtn.setBackground(new java.awt.Color(2, 73, 89));
        addMemberImageBtn.setForeground(new java.awt.Color(78, 80, 82));
        addMemberImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/addMemberImage.png"))); // NOI18N
        addMemberImageBtn.setBorder(null);
        addMemberImageBtn.setBorderPainted(false);
        addMemberImageBtn.setContentAreaFilled(false);
        addMemberImageBtn.setFocusPainted(false);
        addMemberImageBtn.setFocusable(false);
        addMemberImageBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addMemberImageBtn.setIconTextGap(0);
        addMemberImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberImageBtnActionPerformed(evt);
            }
        });

        addEmployeeImageBtn.setBackground(new java.awt.Color(2, 73, 89));
        addEmployeeImageBtn.setForeground(new java.awt.Color(78, 80, 82));
        addEmployeeImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/addEmployeeImage.png"))); // NOI18N
        addEmployeeImageBtn.setBorder(null);
        addEmployeeImageBtn.setBorderPainted(false);
        addEmployeeImageBtn.setContentAreaFilled(false);
        addEmployeeImageBtn.setFocusPainted(false);
        addEmployeeImageBtn.setFocusable(false);
        addEmployeeImageBtn.setIconTextGap(0);
        addEmployeeImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeImageBtnActionPerforme(evt);
            }
        });

        assignTrainerImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/assignTrainerImage.png"))); // NOI18N
        assignTrainerImageBtn.setBorderPainted(false);
        assignTrainerImageBtn.setContentAreaFilled(false);
        assignTrainerImageBtn.setFocusPainted(false);
        assignTrainerImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignTrainerImageBtnActionPerformed(evt);
            }
        });

        truckMemberInformationImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trackMemeberInformaionImage.png"))); // NOI18N
        truckMemberInformationImageBtn.setBorderPainted(false);
        truckMemberInformationImageBtn.setContentAreaFilled(false);
        truckMemberInformationImageBtn.setFocusPainted(false);
        truckMemberInformationImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truckMemberInformationImageBtnActionPerformed(evt);
            }
        });

        truckEmployeeInformationImageBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trackEmployeeImage.png"))); // NOI18N
        truckEmployeeInformationImageBtn.setBorderPainted(false);
        truckEmployeeInformationImageBtn.setContentAreaFilled(false);
        truckEmployeeInformationImageBtn.setFocusPainted(false);
        truckEmployeeInformationImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                truckEmployeeInformationImageBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dashboardPnlLayout = new javax.swing.GroupLayout(dashboardPnl);
        dashboardPnl.setLayout(dashboardPnlLayout);
        dashboardPnlLayout.setHorizontalGroup(
            dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, dashboardPnlLayout.createSequentialGroup()
                .addContainerGap(228, Short.MAX_VALUE)
                .addGroup(dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(truckEmployeeInformationImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(truckMemberInformationImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(assignTrainerImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(dashboardPnlLayout.createSequentialGroup()
                        .addComponent(addEmployeeImageBtn)
                        .addGap(18, 18, 18)
                        .addComponent(addMemberImageBtn)))
                .addContainerGap(210, Short.MAX_VALUE))
        );
        dashboardPnlLayout.setVerticalGroup(
            dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dashboardPnlLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(dashboardPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addMemberImageBtn)
                    .addComponent(addEmployeeImageBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(assignTrainerImageBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(truckMemberInformationImageBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(truckEmployeeInformationImageBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlCards.add(dashboardPnl, "dashboardPnl");

        addEmployeePnl.setBackground(new java.awt.Color(2, 73, 89));
        addEmployeePnl.setForeground(new java.awt.Color(255, 255, 255));
        addEmployeePnl.setPreferredSize(new java.awt.Dimension(773, 545));

        roundPanel3.setBackground(new java.awt.Color(255, 255, 255));
        roundPanel3.setPreferredSize(new java.awt.Dimension(683, 392));

        lblAddEmployee.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        lblAddEmployee.setText("Add Employee Form");

        lblFirstNameEmployee.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblFirstNameEmployee.setText("First name");

        lblEmployeeType.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblEmployeeType.setText("Employee type");

        lblPhoneEmployee.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblPhoneEmployee.setText("Phone number");

        lblSurnameEmployee.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSurnameEmployee.setText("Sur name");

        lblSalary.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSalary.setText("Salary");

        lblAddressEmployee.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblAddressEmployee.setText("Address");

        employeeTypeBtnGroup.add(trainerRadioBtn);
        trainerRadioBtn.setText("Trainer");
        trainerRadioBtn.setFocusPainted(false);
        trainerRadioBtn.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N

        employeeTypeBtnGroup.add(employeeRadioBtn);
        employeeRadioBtn.setText("Regular Employee");
        employeeRadioBtn.setFocusPainted(false);
        employeeRadioBtn.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N

        txtSurnameEmployee.setBackground(new java.awt.Color(233, 233, 233));
        txtSurnameEmployee.setForeground(new java.awt.Color(0, 0, 0));
        txtSurnameEmployee.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSurnameEmployee.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSurnameEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtAddressEmployee.setBackground(new java.awt.Color(233, 233, 233));
        txtAddressEmployee.setForeground(new java.awt.Color(0, 0, 0));
        txtAddressEmployee.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtAddressEmployee.setShadowColor(new java.awt.Color(0, 0, 0));
        txtAddressEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtPhoneEmployee.setBackground(new java.awt.Color(233, 233, 233));
        txtPhoneEmployee.setForeground(new java.awt.Color(0, 0, 0));
        txtPhoneEmployee.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtPhoneEmployee.setShadowColor(new java.awt.Color(0, 0, 0));
        txtPhoneEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtSalaryEmployee.setBackground(new java.awt.Color(233, 233, 233));
        txtSalaryEmployee.setForeground(new java.awt.Color(0, 0, 0));
        txtSalaryEmployee.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSalaryEmployee.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSalaryEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtFirstNameEmployee.setBackground(new java.awt.Color(233, 233, 233));
        txtFirstNameEmployee.setForeground(new java.awt.Color(0, 0, 0));
        txtFirstNameEmployee.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtFirstNameEmployee.setShadowColor(new java.awt.Color(0, 0, 0));
        txtFirstNameEmployee.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        addEmployeeBtn.setBackground(new java.awt.Color(26, 19, 99));
        addEmployeeBtn.setForeground(new java.awt.Color(255, 255, 255));
        addEmployeeBtn.setText("Add");
        addEmployeeBtn.setFocusable(false);
        addEmployeeBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        addEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEmployeeBtnActionPerformed(evt);
            }
        });

        clearEmployeeFormBtn.setBackground(new java.awt.Color(233, 233, 233));
        clearEmployeeFormBtn.setForeground(new java.awt.Color(26, 19, 99));
        clearEmployeeFormBtn.setText("Clear");
        clearEmployeeFormBtn.setFocusable(false);
        clearEmployeeFormBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        clearEmployeeFormBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearEmployeeFormBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundPanel3Layout = new javax.swing.GroupLayout(roundPanel3);
        roundPanel3.setLayout(roundPanel3Layout);
        roundPanel3Layout.setHorizontalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel3Layout.createSequentialGroup()
                        .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFirstNameEmployee)
                            .addComponent(txtFirstNameEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSurnameEmployee)
                            .addComponent(txtSurnameEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAddressEmployee)
                            .addComponent(txtAddressEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addEmployeeBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(57, 57, 57)
                        .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEmployeeType)
                            .addComponent(lblSalary)
                            .addComponent(txtPhoneEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblPhoneEmployee)
                            .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, roundPanel3Layout.createSequentialGroup()
                                    .addComponent(employeeRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(trainerRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(txtSalaryEmployee, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(clearEmployeeFormBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblAddEmployee))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        roundPanel3Layout.setVerticalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblAddEmployee)
                .addGap(18, 18, 18)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneEmployee)
                    .addComponent(lblFirstNameEmployee))
                .addGap(0, 0, 0)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel3Layout.createSequentialGroup()
                        .addComponent(txtFirstNameEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblSurnameEmployee)
                        .addGap(0, 0, 0)
                        .addComponent(txtSurnameEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblAddressEmployee)
                        .addGap(0, 0, 0)
                        .addComponent(txtAddressEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roundPanel3Layout.createSequentialGroup()
                        .addComponent(txtPhoneEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(lblSalary)
                        .addGap(0, 0, 0)
                        .addComponent(txtSalaryEmployee, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                        .addComponent(lblEmployeeType)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(employeeRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trainerRadioBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearEmployeeFormBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addEmployeePnlLayout = new javax.swing.GroupLayout(addEmployeePnl);
        addEmployeePnl.setLayout(addEmployeePnlLayout);
        addEmployeePnlLayout.setHorizontalGroup(
            addEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addEmployeePnlLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(roundPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        addEmployeePnlLayout.setVerticalGroup(
            addEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addEmployeePnlLayout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(roundPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 423, Short.MAX_VALUE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pnlCards.add(addEmployeePnl, "addEmployeePnl");

        addMemberPnl.setBackground(new java.awt.Color(2, 73, 89));
        addMemberPnl.setForeground(new java.awt.Color(255, 255, 255));
        addMemberPnl.setPreferredSize(new java.awt.Dimension(773, 545));
        addMemberPnl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        roundPanel1.setBackground(new java.awt.Color(255, 255, 255));

        lblAddMember.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        lblAddMember.setText("Add Member form");

        lblSurname.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSurname.setText("Sur name");

        lblMemberType.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblMemberType.setText("Member type");

        lblGender.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblGender.setText("Gender");

        lblFirstName.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblFirstName.setText("First Name");

        lblPhone.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblPhone.setText("Phone Number");

        lblSportDepartment.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSportDepartment.setText("Sport Team");

        lblAdress.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblAdress.setText("Adress");

        lblMajorPosition.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblMajorPosition.setText("Major");

        genderButtonGroup.add(maleBtn);
        maleBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        maleBtn.setText("Male");
        maleBtn.setContentAreaFilled(false);
        maleBtn.setFocusPainted(false);

        genderButtonGroup.add(femaleBtn);
        femaleBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        femaleBtn.setText("Female");
        femaleBtn.setContentAreaFilled(false);
        femaleBtn.setFocusPainted(false);

        memberTypeGroupButton.add(studentBtn);
        studentBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        studentBtn.setText("Student");
        studentBtn.setContentAreaFilled(false);
        studentBtn.setFocusPainted(false);
        studentBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentBtnActionPerformed(evt);
            }
        });

        memberTypeGroupButton.add(staffBtn);
        staffBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        staffBtn.setText("Staff");
        staffBtn.setContentAreaFilled(false);
        staffBtn.setFocusPainted(false);
        staffBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                staffBtnActionPerformed(evt);
            }
        });

        txtFirstName.setBackground(new java.awt.Color(233, 233, 233));
        txtFirstName.setForeground(new java.awt.Color(0, 0, 0));
        txtFirstName.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtFirstName.setShadowColor(new java.awt.Color(0, 0, 0));
        txtFirstName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtSurname.setBackground(new java.awt.Color(233, 233, 233));
        txtSurname.setForeground(new java.awt.Color(0, 0, 0));
        txtSurname.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSurname.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSurname.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtPhone.setBackground(new java.awt.Color(233, 233, 233));
        txtPhone.setForeground(new java.awt.Color(0, 0, 0));
        txtPhone.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtPhone.setShadowColor(new java.awt.Color(0, 0, 0));
        txtPhone.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtSportTeamOrDepartment.setBackground(new java.awt.Color(233, 233, 233));
        txtSportTeamOrDepartment.setForeground(new java.awt.Color(0, 0, 0));
        txtSportTeamOrDepartment.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSportTeamOrDepartment.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSportTeamOrDepartment.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtAdress.setBackground(new java.awt.Color(233, 233, 233));
        txtAdress.setForeground(new java.awt.Color(0, 0, 0));
        txtAdress.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtAdress.setShadowColor(new java.awt.Color(0, 0, 0));
        txtAdress.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtMajorOrPosition.setBackground(new java.awt.Color(233, 233, 233));
        txtMajorOrPosition.setForeground(new java.awt.Color(0, 0, 0));
        txtMajorOrPosition.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtMajorOrPosition.setShadowColor(new java.awt.Color(0, 0, 0));
        txtMajorOrPosition.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        addMemberBtn.setBackground(new java.awt.Color(26, 19, 99));
        addMemberBtn.setForeground(new java.awt.Color(255, 255, 255));
        addMemberBtn.setText("Add");
        addMemberBtn.setFocusable(false);
        addMemberBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        addMemberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemberBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(233, 233, 233));
        clearBtn.setForeground(new java.awt.Color(26, 19, 99));
        clearBtn.setText("Clear");
        clearBtn.setFocusable(false);
        clearBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        txtDob.setEditable(false);
        txtDob.setBackground(new java.awt.Color(233, 233, 233));
        txtDob.setForeground(new java.awt.Color(0, 0, 0));
        txtDob.setFocusable(false);
        txtDob.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtDob.setShadowColor(new java.awt.Color(0, 0, 0));
        txtDob.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDobMouseClicked(evt);
            }
        });

        pickDateBtn.setBackground(new java.awt.Color(26, 19, 99));
        pickDateBtn.setForeground(new java.awt.Color(255, 255, 255));
        pickDateBtn.setText("pick");
        pickDateBtn.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        pickDateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickDateBtnActionPerformed(evt);
            }
        });

        lblFirstName2.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblFirstName2.setText("Date of birth");

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap(56, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(lblAdress)
                        .addComponent(lblPhone)
                        .addComponent(txtPhone, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtAdress, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                            .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(roundPanel1Layout.createSequentialGroup()
                                    .addComponent(lblFirstName)
                                    .addGap(0, 0, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                                    .addGap(0, 0, Short.MAX_VALUE)
                                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblSurname)
                                .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pickDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblFirstName2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblGender)
                    .addComponent(lblMemberType)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addComponent(studentBtn)
                        .addGap(42, 42, 42)
                        .addComponent(staffBtn))
                    .addComponent(txtMajorOrPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMajorPosition)
                    .addComponent(lblSportDepartment)
                    .addComponent(txtSportTeamOrDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addComponent(maleBtn)
                        .addGap(35, 35, 35)
                        .addComponent(femaleBtn)))
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAddMember)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addComponent(addMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        roundPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addMemberBtn, clearBtn});

        roundPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtFirstName, txtSurname});

        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddMember)
                .addGap(20, 20, 20)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(lblSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGender))
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(maleBtn)
                            .addComponent(femaleBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)))
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMemberType)
                    .addComponent(lblFirstName2))
                .addGap(0, 0, 0)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(studentBtn)
                    .addComponent(staffBtn)
                    .addComponent(txtDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pickDateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAdress, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMajorPosition))
                .addGap(0, 0, 0)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAdress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMajorOrPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSportDepartment))
                .addGap(0, 0, 0)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSportTeamOrDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout addMemberPnlLayout = new javax.swing.GroupLayout(addMemberPnl);
        addMemberPnl.setLayout(addMemberPnlLayout);
        addMemberPnlLayout.setHorizontalGroup(
            addMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addMemberPnlLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(roundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        addMemberPnlLayout.setVerticalGroup(
            addMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addMemberPnlLayout.createSequentialGroup()
                .addContainerGap(98, Short.MAX_VALUE)
                .addComponent(roundPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(99, Short.MAX_VALUE))
        );

        pnlCards.add(addMemberPnl, "addMemberPnl");

        manageEmployeesPnl.setBackground(new java.awt.Color(2, 73, 89));
        manageEmployeesPnl.setForeground(new java.awt.Color(255, 255, 255));
        manageEmployeesPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        roundPanel4.setBackground(new java.awt.Color(255, 255, 255));

        employeesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Employee Name", "Employee Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        employeesTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        employeesTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        employeesTable.setShowGrid(true);
        employeesTable.setShowVerticalLines(false);
        jScrollPane.setViewportView(employeesTable);
        if (employeesTable.getColumnModel().getColumnCount() > 0) {
            employeesTable.getColumnModel().getColumn(0).setResizable(false);
            employeesTable.getColumnModel().getColumn(1).setResizable(false);
            employeesTable.getColumnModel().getColumn(2).setResizable(false);
        }

        txtSearchEmp.setBackground(new java.awt.Color(11, 196, 217));
        txtSearchEmp.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchEmp.setText("Search by ID or Name");
        txtSearchEmp.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearchEmp.setRound(30);
        txtSearchEmp.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSearchEmp.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                placeHolderRemove(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                placeHolderCheck(evt);
            }
        });
        txtSearchEmp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchEmpActionPerformed(evt);
            }
        });
        txtSearchEmp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchEmpKeyReleased(evt);
            }
        });

        lblSearchIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/searchIcon.png"))); // NOI18N

        editEmployeeBtn.setBackground(new java.awt.Color(11, 196, 217));
        editEmployeeBtn.setForeground(new java.awt.Color(255, 255, 255));
        editEmployeeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pen.png"))); // NOI18N
        editEmployeeBtn.setText("Edit");
        editEmployeeBtn.setFocusPainted(false);
        editEmployeeBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        editEmployeeBtn.setIconTextGap(10);
        editEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editEmployeeBtnActionPerformed(evt);
            }
        });

        deleteEmployeeBtn.setBackground(new java.awt.Color(11, 196, 217));
        deleteEmployeeBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteEmployeeBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trashIconImage.png"))); // NOI18N
        deleteEmployeeBtn.setText("Delete");
        deleteEmployeeBtn.setFocusPainted(false);
        deleteEmployeeBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        deleteEmployeeBtn.setIconTextGap(10);
        deleteEmployeeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteEmployeeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundPanel4Layout = new javax.swing.GroupLayout(roundPanel4);
        roundPanel4.setLayout(roundPanel4Layout);
        roundPanel4Layout.setHorizontalGroup(
            roundPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(roundPanel4Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(lblSearchIcon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchEmp, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        roundPanel4Layout.setVerticalGroup(
            roundPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel4Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(roundPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearchEmp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(editEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteEmployeeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSearchIcon, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout manageEmployeesPnlLayout = new javax.swing.GroupLayout(manageEmployeesPnl);
        manageEmployeesPnl.setLayout(manageEmployeesPnlLayout);
        manageEmployeesPnlLayout.setHorizontalGroup(
            manageEmployeesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEmployeesPnlLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(roundPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        manageEmployeesPnlLayout.setVerticalGroup(
            manageEmployeesPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageEmployeesPnlLayout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(roundPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(93, Short.MAX_VALUE))
        );

        pnlCards.add(manageEmployeesPnl, "manageEmployeesPnl");

        manageMemberssPnl.setBackground(new java.awt.Color(2, 73, 89));
        manageMemberssPnl.setForeground(new java.awt.Color(255, 255, 255));
        manageMemberssPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        roundPanel6.setBackground(new java.awt.Color(255, 255, 255));

        membersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Member Name", "Member Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        membersTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        membersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        membersTable.setShowGrid(true);
        membersTable.setShowVerticalLines(false);
        jScrollPane1.setViewportView(membersTable);
        if (membersTable.getColumnModel().getColumnCount() > 0) {
            membersTable.getColumnModel().getColumn(0).setResizable(false);
            membersTable.getColumnModel().getColumn(1).setResizable(false);
            membersTable.getColumnModel().getColumn(2).setResizable(false);
        }

        txtSearchMember.setBackground(new java.awt.Color(11, 196, 217));
        txtSearchMember.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchMember.setText("Search by ID or Name");
        txtSearchMember.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearchMember.setRound(30);
        txtSearchMember.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSearchMember.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                placeHolderRemove(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                placeHolderCheck(evt);
            }
        });
        txtSearchMember.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchMemberKeyReleased(evt);
            }
        });

        lblSearchIcon1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/searchIcon.png"))); // NOI18N

        editMemberBtn.setBackground(new java.awt.Color(11, 196, 217));
        editMemberBtn.setForeground(new java.awt.Color(255, 255, 255));
        editMemberBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/pen.png"))); // NOI18N
        editMemberBtn.setText("Edit");
        editMemberBtn.setFocusPainted(false);
        editMemberBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        editMemberBtn.setIconTextGap(10);
        editMemberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMemberBtnActionPerformed(evt);
            }
        });

        deleteMemberBtn.setBackground(new java.awt.Color(11, 196, 217));
        deleteMemberBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteMemberBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/trashIconImage.png"))); // NOI18N
        deleteMemberBtn.setText("Delete");
        deleteMemberBtn.setFocusPainted(false);
        deleteMemberBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        deleteMemberBtn.setIconTextGap(10);
        deleteMemberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMemberBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundPanel6Layout = new javax.swing.GroupLayout(roundPanel6);
        roundPanel6.setLayout(roundPanel6Layout);
        roundPanel6Layout.setHorizontalGroup(
            roundPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(roundPanel6Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblSearchIcon1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchMember, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(editMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        roundPanel6Layout.setVerticalGroup(
            roundPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel6Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(roundPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(editMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtSearchMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSearchIcon1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        roundPanel6Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblSearchIcon1, txtSearchMember});

        javax.swing.GroupLayout manageMemberssPnlLayout = new javax.swing.GroupLayout(manageMemberssPnl);
        manageMemberssPnl.setLayout(manageMemberssPnlLayout);
        manageMemberssPnlLayout.setHorizontalGroup(
            manageMemberssPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageMemberssPnlLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(roundPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        manageMemberssPnlLayout.setVerticalGroup(
            manageMemberssPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(manageMemberssPnlLayout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(roundPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(87, Short.MAX_VALUE))
        );

        pnlCards.add(manageMemberssPnl, "manageMembersPnl");

        listPersonalTrainerPnl.setBackground(new java.awt.Color(2, 73, 89));
        listPersonalTrainerPnl.setForeground(new java.awt.Color(255, 255, 255));
        listPersonalTrainerPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        roundPanel9.setBackground(new java.awt.Color(255, 255, 255));

        personalTrainerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Employee Name", "NO. Members Assigned"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        personalTrainerTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        personalTrainerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        personalTrainerTable.setShowGrid(true);
        personalTrainerTable.setShowVerticalLines(false);
        personalTrainerTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                personalTrainerTableMouseReleased(evt);
            }
        });
        jScrollPane3.setViewportView(personalTrainerTable);
        if (personalTrainerTable.getColumnModel().getColumnCount() > 0) {
            personalTrainerTable.getColumnModel().getColumn(0).setResizable(false);
            personalTrainerTable.getColumnModel().getColumn(1).setResizable(false);
            personalTrainerTable.getColumnModel().getColumn(2).setResizable(false);
        }

        txtSearchTrainer.setBackground(new java.awt.Color(11, 196, 217));
        txtSearchTrainer.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchTrainer.setText("Search by ID or Name");
        txtSearchTrainer.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearchTrainer.setRound(30);
        txtSearchTrainer.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSearchTrainer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                placeHolderRemove(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                placeHolderCheck(evt);
            }
        });
        txtSearchTrainer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchTrainerKeyReleased(evt);
            }
        });

        lblSearchIcon3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/searchIcon.png"))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        jLabel1.setText("Select an Employee to view the mebers list.");

        javax.swing.GroupLayout roundPanel9Layout = new javax.swing.GroupLayout(roundPanel9);
        roundPanel9.setLayout(roundPanel9Layout);
        roundPanel9Layout.setHorizontalGroup(
            roundPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(roundPanel9Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblSearchIcon3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 369, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        roundPanel9Layout.setVerticalGroup(
            roundPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel9Layout.createSequentialGroup()
                .addContainerGap(17, Short.MAX_VALUE)
                .addGroup(roundPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSearchIcon3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearchTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        roundPanel9Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblSearchIcon3, txtSearchTrainer});

        javax.swing.GroupLayout listPersonalTrainerPnlLayout = new javax.swing.GroupLayout(listPersonalTrainerPnl);
        listPersonalTrainerPnl.setLayout(listPersonalTrainerPnlLayout);
        listPersonalTrainerPnlLayout.setHorizontalGroup(
            listPersonalTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPersonalTrainerPnlLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(roundPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        listPersonalTrainerPnlLayout.setVerticalGroup(
            listPersonalTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listPersonalTrainerPnlLayout.createSequentialGroup()
                .addContainerGap(94, Short.MAX_VALUE)
                .addComponent(roundPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(95, Short.MAX_VALUE))
        );

        pnlCards.add(listPersonalTrainerPnl, "listPersonalTrainerPnl");

        trainerMembersPnl.setBackground(new java.awt.Color(2, 73, 89));
        trainerMembersPnl.setForeground(new java.awt.Color(255, 255, 255));
        trainerMembersPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        roundPanel10.setBackground(new java.awt.Color(255, 255, 255));

        trainerMembersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Member Name", "Member Type", "Phone"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        trainerMembersTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        trainerMembersTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        trainerMembersTable.setShowGrid(true);
        trainerMembersTable.setShowVerticalLines(false);
        jScrollPane4.setViewportView(trainerMembersTable);
        if (trainerMembersTable.getColumnModel().getColumnCount() > 0) {
            trainerMembersTable.getColumnModel().getColumn(0).setResizable(false);
            trainerMembersTable.getColumnModel().getColumn(1).setResizable(false);
            trainerMembersTable.getColumnModel().getColumn(2).setResizable(false);
        }

        txtSearchTrainerMember.setBackground(new java.awt.Color(11, 196, 217));
        txtSearchTrainerMember.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchTrainerMember.setText("Search by ID or Name");
        txtSearchTrainerMember.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearchTrainerMember.setRound(30);
        txtSearchTrainerMember.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSearchTrainerMember.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                placeHolderRemove(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                placeHolderCheck(evt);
            }
        });
        txtSearchTrainerMember.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchTrainerMemberKeyReleased(evt);
            }
        });

        lblSearchIcon4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/searchIcon.png"))); // NOI18N

        deleteMemberBtn1.setBackground(new java.awt.Color(11, 196, 217));
        deleteMemberBtn1.setForeground(new java.awt.Color(255, 255, 255));
        deleteMemberBtn1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/log-out (2).png"))); // NOI18N
        deleteMemberBtn1.setText("Back");
        deleteMemberBtn1.setFocusPainted(false);
        deleteMemberBtn1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        deleteMemberBtn1.setIconTextGap(10);
        deleteMemberBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMemberBtn1ActionPerformed(evt);
            }
        });

        lblTrainerName.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblTrainerName.setText("Personal trainer list");

        javax.swing.GroupLayout roundPanel10Layout = new javax.swing.GroupLayout(roundPanel10);
        roundPanel10.setLayout(roundPanel10Layout);
        roundPanel10Layout.setHorizontalGroup(
            roundPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 662, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(roundPanel10Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblSearchIcon4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchTrainerMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTrainerName, javax.swing.GroupLayout.PREFERRED_SIZE, 267, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(deleteMemberBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22))
        );
        roundPanel10Layout.setVerticalGroup(
            roundPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel10Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addGroup(roundPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTrainerName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtSearchTrainerMember, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteMemberBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblSearchIcon4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout trainerMembersPnlLayout = new javax.swing.GroupLayout(trainerMembersPnl);
        trainerMembersPnl.setLayout(trainerMembersPnlLayout);
        trainerMembersPnlLayout.setHorizontalGroup(
            trainerMembersPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainerMembersPnlLayout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(roundPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        trainerMembersPnlLayout.setVerticalGroup(
            trainerMembersPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trainerMembersPnlLayout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(roundPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(88, Short.MAX_VALUE))
        );

        pnlCards.add(trainerMembersPnl, "trainerMembersPnl");

        assignTrainerPnl.setBackground(new java.awt.Color(2, 73, 89));
        assignTrainerPnl.setForeground(new java.awt.Color(255, 255, 255));
        assignTrainerPnl.setPreferredSize(new java.awt.Dimension(773, 545));

        roundPanel8.setBackground(new java.awt.Color(255, 255, 255));

        membersAssignTrainerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Member ID", "Member Name", "Member Type", "Assigned Trainer"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        membersAssignTrainerTable.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        membersAssignTrainerTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        membersAssignTrainerTable.setShowGrid(true);
        membersAssignTrainerTable.setShowVerticalLines(false);
        jScrollPane2.setViewportView(membersAssignTrainerTable);
        if (membersAssignTrainerTable.getColumnModel().getColumnCount() > 0) {
            membersAssignTrainerTable.getColumnModel().getColumn(0).setResizable(false);
            membersAssignTrainerTable.getColumnModel().getColumn(1).setResizable(false);
            membersAssignTrainerTable.getColumnModel().getColumn(2).setResizable(false);
            membersAssignTrainerTable.getColumnModel().getColumn(3).setResizable(false);
            membersAssignTrainerTable.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(assignedTrainerComboBox));
        }

        txtSearchMemberTrainer.setBackground(new java.awt.Color(11, 196, 217));
        txtSearchMemberTrainer.setForeground(new java.awt.Color(255, 255, 255));
        txtSearchMemberTrainer.setText("Search by ID or Name");
        txtSearchMemberTrainer.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSearchMemberTrainer.setRound(30);
        txtSearchMemberTrainer.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSearchMemberTrainer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                placeHolderRemove(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                placeHolderCheck(evt);
            }
        });
        txtSearchMemberTrainer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchMemberTrainerKeyReleased(evt);
            }
        });

        lblSearchIcon2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/searchIcon.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        jLabel2.setText("<html><p style=\"text-align:center;\">Choose a trainer to assign</p></html>");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout roundPanel8Layout = new javax.swing.GroupLayout(roundPanel8);
        roundPanel8.setLayout(roundPanel8Layout);
        roundPanel8Layout.setHorizontalGroup(
            roundPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 660, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(roundPanel8Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblSearchIcon2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtSearchMemberTrainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32))
        );
        roundPanel8Layout.setVerticalGroup(
            roundPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel8Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(roundPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtSearchMemberTrainer, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblSearchIcon2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout assignTrainerPnlLayout = new javax.swing.GroupLayout(assignTrainerPnl);
        assignTrainerPnl.setLayout(assignTrainerPnlLayout);
        assignTrainerPnlLayout.setHorizontalGroup(
            assignTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignTrainerPnlLayout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(roundPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(45, Short.MAX_VALUE))
        );
        assignTrainerPnlLayout.setVerticalGroup(
            assignTrainerPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(assignTrainerPnlLayout.createSequentialGroup()
                .addContainerGap(93, Short.MAX_VALUE)
                .addComponent(roundPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(94, Short.MAX_VALUE))
        );

        pnlCards.add(assignTrainerPnl, "assignTrainerPnl");

        editEmployeePnl.setBackground(new java.awt.Color(2, 73, 89));
        editEmployeePnl.setForeground(new java.awt.Color(255, 255, 255));
        editEmployeePnl.setPreferredSize(new java.awt.Dimension(773, 545));
        editEmployeePnl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        roundPanel5.setBackground(new java.awt.Color(255, 255, 255));
        roundPanel5.setPreferredSize(new java.awt.Dimension(683, 392));

        lblAddEmployee1.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        lblAddEmployee1.setText("Edit Employee Form");

        lblFirstNameEmployee1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblFirstNameEmployee1.setText("First name");

        lblEmployeeType1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblEmployeeType1.setText("Employee type");

        lblPhoneEmployee1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblPhoneEmployee1.setText("Phone number");

        lblSurnameEmployee1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSurnameEmployee1.setText("Sur name");

        lblSalary1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSalary1.setText("Salary");

        lblAddressEmployee1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblAddressEmployee1.setText("Address");

        employeeTypeBtnGroup.add(trainerRadioBtnEdit);
        trainerRadioBtnEdit.setText("Trainer");
        trainerRadioBtnEdit.setEnabled(false);
        trainerRadioBtnEdit.setFocusPainted(false);
        trainerRadioBtnEdit.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N

        employeeTypeBtnGroup.add(employeeRadioBtnEdit);
        employeeRadioBtnEdit.setText("Regular Employee");
        employeeRadioBtnEdit.setEnabled(false);
        employeeRadioBtnEdit.setFocusPainted(false);
        employeeRadioBtnEdit.setFont(new java.awt.Font("Poppins", 0, 16)); // NOI18N

        txtSurnameEmployeeEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtSurnameEmployeeEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtSurnameEmployeeEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSurnameEmployeeEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSurnameEmployeeEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtAddressEmployeeEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtAddressEmployeeEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtAddressEmployeeEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtAddressEmployeeEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtAddressEmployeeEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtPhoneEmployeeEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtPhoneEmployeeEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtPhoneEmployeeEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtPhoneEmployeeEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtPhoneEmployeeEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtSalaryEmployeeEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtSalaryEmployeeEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtSalaryEmployeeEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSalaryEmployeeEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSalaryEmployeeEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtFirstNameEmployeeEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtFirstNameEmployeeEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtFirstNameEmployeeEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtFirstNameEmployeeEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtFirstNameEmployeeEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        saveEmployeeEditBtn.setBackground(new java.awt.Color(26, 19, 99));
        saveEmployeeEditBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveEmployeeEditBtn.setText("Save");
        saveEmployeeEditBtn.setFocusable(false);
        saveEmployeeEditBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        saveEmployeeEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveEmployeeEditBtnActionPerformed(evt);
            }
        });

        backEmployeeEditBtn.setBackground(new java.awt.Color(233, 233, 233));
        backEmployeeEditBtn.setForeground(new java.awt.Color(26, 19, 99));
        backEmployeeEditBtn.setText("Back");
        backEmployeeEditBtn.setFocusable(false);
        backEmployeeEditBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        backEmployeeEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backEmployeeEditBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roundPanel5Layout = new javax.swing.GroupLayout(roundPanel5);
        roundPanel5.setLayout(roundPanel5Layout);
        roundPanel5Layout.setHorizontalGroup(
            roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel5Layout.createSequentialGroup()
                .addContainerGap(55, Short.MAX_VALUE)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblFirstNameEmployee1)
                    .addComponent(txtFirstNameEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSurnameEmployee1)
                    .addComponent(txtSurnameEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddressEmployee1)
                    .addComponent(txtAddressEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveEmployeeEditBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(lblEmployeeType1)
                        .addComponent(lblSalary1)
                        .addComponent(txtPhoneEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblPhoneEmployee1)
                        .addComponent(txtSalaryEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roundPanel5Layout.createSequentialGroup()
                        .addComponent(employeeRadioBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(trainerRadioBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(backEmployeeEditBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(55, Short.MAX_VALUE))
            .addGroup(roundPanel5Layout.createSequentialGroup()
                .addGap(236, 236, 236)
                .addComponent(lblAddEmployee1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        roundPanel5Layout.setVerticalGroup(
            roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel5Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblAddEmployee1)
                .addGap(20, 20, 20)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhoneEmployee1)
                    .addComponent(lblFirstNameEmployee1))
                .addGap(0, 0, 0)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPhoneEmployeeEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtFirstNameEmployeeEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSalary1)
                    .addComponent(lblSurnameEmployee1))
                .addGap(0, 0, 0)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSalaryEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSurnameEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel5Layout.createSequentialGroup()
                        .addComponent(lblEmployeeType1)
                        .addGap(0, 0, 0)
                        .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtAddressEmployeeEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(trainerRadioBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeeRadioBtnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblAddressEmployee1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(roundPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveEmployeeEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(backEmployeeEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout editEmployeePnlLayout = new javax.swing.GroupLayout(editEmployeePnl);
        editEmployeePnl.setLayout(editEmployeePnlLayout);
        editEmployeePnlLayout.setHorizontalGroup(
            editEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editEmployeePnlLayout.createSequentialGroup()
                .addContainerGap(42, Short.MAX_VALUE)
                .addComponent(roundPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 676, Short.MAX_VALUE)
                .addContainerGap(44, Short.MAX_VALUE))
        );
        editEmployeePnlLayout.setVerticalGroup(
            editEmployeePnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editEmployeePnlLayout.createSequentialGroup()
                .addContainerGap(79, Short.MAX_VALUE)
                .addComponent(roundPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addContainerGap(80, Short.MAX_VALUE))
        );

        pnlCards.add(editEmployeePnl, "editEmployeePnl");

        editMemberPnl.setBackground(new java.awt.Color(2, 73, 89));
        editMemberPnl.setForeground(new java.awt.Color(255, 255, 255));
        editMemberPnl.setPreferredSize(new java.awt.Dimension(773, 545));
        editMemberPnl.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                editMemberPnlrepaintShadowForTextFields(evt);
            }
        });

        roundPanel7.setBackground(new java.awt.Color(255, 255, 255));

        lblAddMember1.setFont(new java.awt.Font("Poppins", 1, 20)); // NOI18N
        lblAddMember1.setText("Edit Member form");

        lblSurname1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSurname1.setText("Sur name");

        lblMemberType1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblMemberType1.setText("Member type");

        lblGender1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblGender1.setText("Gender");

        lblFirstName1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblFirstName1.setText("First Name");

        lblPhone1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblPhone1.setText("Phone Number");

        lblSportDepartmentEdit.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblSportDepartmentEdit.setText("Sport Team");

        lblAdress1.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblAdress1.setText("Adress");

        lblMajorPositionEdit.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblMajorPositionEdit.setText("Major");

        genderButtonGroupEdit.add(maleEditBtn);
        maleEditBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        maleEditBtn.setText("Male");
        maleEditBtn.setContentAreaFilled(false);
        maleEditBtn.setFocusPainted(false);

        genderButtonGroupEdit.add(femaleEditBtn);
        femaleEditBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        femaleEditBtn.setText("Female");
        femaleEditBtn.setContentAreaFilled(false);
        femaleEditBtn.setFocusPainted(false);

        memberTypeGroupButton.add(studentEditBtn);
        studentEditBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        studentEditBtn.setText("Student");
        studentEditBtn.setContentAreaFilled(false);
        studentEditBtn.setEnabled(false);
        studentEditBtn.setFocusPainted(false);

        memberTypeGroupButton.add(staffEditBtn);
        staffEditBtn.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        staffEditBtn.setText("Staff");
        staffEditBtn.setContentAreaFilled(false);
        staffEditBtn.setEnabled(false);
        staffEditBtn.setFocusPainted(false);

        txtFirstNameMemberEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtFirstNameMemberEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtFirstNameMemberEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtFirstNameMemberEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtFirstNameMemberEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtSurNameMemberEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtSurNameMemberEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtSurNameMemberEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSurNameMemberEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSurNameMemberEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtPhoneMemberEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtPhoneMemberEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtPhoneMemberEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtPhoneMemberEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtPhoneMemberEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtSportTeamOrDepartmentEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtSportTeamOrDepartmentEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtSportTeamOrDepartmentEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtSportTeamOrDepartmentEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtSportTeamOrDepartmentEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtAdressMemberEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtAdressMemberEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtAdressMemberEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtAdressMemberEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtAdressMemberEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        txtMajorOrPositionEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtMajorOrPositionEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtMajorOrPositionEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtMajorOrPositionEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtMajorOrPositionEdit.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                repaintShadowForTextFields(evt);
            }
        });

        saveMemberBtn.setBackground(new java.awt.Color(26, 19, 99));
        saveMemberBtn.setForeground(new java.awt.Color(255, 255, 255));
        saveMemberBtn.setText("Save");
        saveMemberBtn.setFocusable(false);
        saveMemberBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        saveMemberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMemberBtnActionPerformed(evt);
            }
        });

        backMemberBtn.setBackground(new java.awt.Color(233, 233, 233));
        backMemberBtn.setForeground(new java.awt.Color(26, 19, 99));
        backMemberBtn.setText("Back");
        backMemberBtn.setFocusable(false);
        backMemberBtn.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        backMemberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backMemberBtnActionPerformed(evt);
            }
        });

        txtDobEdit.setEditable(false);
        txtDobEdit.setBackground(new java.awt.Color(233, 233, 233));
        txtDobEdit.setForeground(new java.awt.Color(0, 0, 0));
        txtDobEdit.setFocusable(false);
        txtDobEdit.setFont(new java.awt.Font("Poppins", 0, 14)); // NOI18N
        txtDobEdit.setShadowColor(new java.awt.Color(0, 0, 0));
        txtDobEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtDobEditMouseClicked(evt);
            }
        });

        pickDateBtn1.setBackground(new java.awt.Color(26, 19, 99));
        pickDateBtn1.setForeground(new java.awt.Color(255, 255, 255));
        pickDateBtn1.setText("pick");
        pickDateBtn1.setFont(new java.awt.Font("Poppins", 1, 14)); // NOI18N
        pickDateBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pickDateBtn1ActionPerformed(evt);
            }
        });

        lblFirstName3.setFont(new java.awt.Font("Poppins", 1, 16)); // NOI18N
        lblFirstName3.setText("Date of birth");

        javax.swing.GroupLayout roundPanel7Layout = new javax.swing.GroupLayout(roundPanel7);
        roundPanel7.setLayout(roundPanel7Layout);
        roundPanel7Layout.setHorizontalGroup(
            roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblAdress1)
                    .addComponent(txtAdressMemberEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPhone1)
                    .addComponent(txtPhoneMemberEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundPanel7Layout.createSequentialGroup()
                        .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(lblFirstName1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblFirstName3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(txtFirstNameMemberEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSurname1)
                            .addComponent(txtSurNameMemberEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(roundPanel7Layout.createSequentialGroup()
                        .addComponent(txtDobEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pickDateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMemberType1)
                    .addGroup(roundPanel7Layout.createSequentialGroup()
                        .addComponent(studentEditBtn)
                        .addGap(42, 42, 42)
                        .addComponent(staffEditBtn))
                    .addComponent(txtMajorOrPositionEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMajorPositionEdit)
                    .addComponent(lblSportDepartmentEdit)
                    .addComponent(txtSportTeamOrDepartmentEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundPanel7Layout.createSequentialGroup()
                        .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(maleEditBtn)
                            .addComponent(lblGender1))
                        .addGap(18, 18, 18)
                        .addComponent(femaleEditBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(roundPanel7Layout.createSequentialGroup()
                .addContainerGap(243, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblAddMember1)
                    .addGroup(roundPanel7Layout.createSequentialGroup()
                        .addComponent(saveMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(backMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(242, Short.MAX_VALUE))
        );

        roundPanel7Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {backMemberBtn, saveMemberBtn});

        roundPanel7Layout.setVerticalGroup(
            roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblAddMember1)
                .addGap(20, 20, 20)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblGender1)
                    .addComponent(lblFirstName1)
                    .addComponent(lblSurname1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFirstNameMemberEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSurNameMemberEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(maleEditBtn)
                    .addComponent(femaleEditBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMemberType1)
                    .addComponent(lblFirstName3))
                .addGap(0, 0, 0)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pickDateBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(studentEditBtn)
                        .addComponent(staffEditBtn)
                        .addComponent(txtDobEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAdress1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblMajorPositionEdit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtMajorOrPositionEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtAdressMemberEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPhone1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSportDepartmentEdit))
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtPhoneMemberEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txtSportTeamOrDepartmentEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(roundPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveMemberBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout editMemberPnlLayout = new javax.swing.GroupLayout(editMemberPnl);
        editMemberPnl.setLayout(editMemberPnlLayout);
        editMemberPnlLayout.setHorizontalGroup(
            editMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editMemberPnlLayout.createSequentialGroup()
                .addContainerGap(41, Short.MAX_VALUE)
                .addComponent(roundPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(42, Short.MAX_VALUE))
        );
        editMemberPnlLayout.setVerticalGroup(
            editMemberPnlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editMemberPnlLayout.createSequentialGroup()
                .addContainerGap(97, Short.MAX_VALUE)
                .addComponent(roundPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(97, Short.MAX_VALUE))
        );

        pnlCards.add(editMemberPnl, "editMemberPnl");

        mainPage.setRightComponent(pnlCards);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPage, javax.swing.GroupLayout.PREFERRED_SIZE, 596, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addMemberImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberImageBtnActionPerformed
        java.awt.event.ActionEvent newEvt = new java.awt.event.ActionEvent(addMemberButton, evt.getID(), evt.getActionCommand());
        addMemberButtonActionPerformed(newEvt);
    }//GEN-LAST:event_addMemberImageBtnActionPerformed

    private void addEmployeeImageBtnActionPerforme(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeImageBtnActionPerforme
        java.awt.event.ActionEvent newEvt = new java.awt.event.ActionEvent(addEmployeeButton, evt.getID(), evt.getActionCommand());
        addEmployeeButtonActionPerformed(newEvt);
    }//GEN-LAST:event_addEmployeeImageBtnActionPerforme

    private void assignTrainerImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTrainerImageBtnActionPerformed
        java.awt.event.ActionEvent newEvt = new java.awt.event.ActionEvent(assignTrainerButton, evt.getID(), evt.getActionCommand());
        assignTrainerButtonActionPerformed(newEvt);
    }//GEN-LAST:event_assignTrainerImageBtnActionPerformed

    private void truckMemberInformationImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truckMemberInformationImageBtnActionPerformed
        java.awt.event.ActionEvent newEvt = new java.awt.event.ActionEvent(manageMemberButton, evt.getID(), evt.getActionCommand());
        manageMemberButtonActionPerformed(newEvt);
    }//GEN-LAST:event_truckMemberInformationImageBtnActionPerformed

    private void truckEmployeeInformationImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_truckEmployeeInformationImageBtnActionPerformed
        java.awt.event.ActionEvent newEvt = new java.awt.event.ActionEvent(manageEmployeesButton, evt.getID(), evt.getActionCommand());
        manageEmployeesButtonActionPerformed(newEvt);
    }//GEN-LAST:event_truckEmployeeInformationImageBtnActionPerformed

    private void staffBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_staffBtnActionPerformed
        // TODO add your handling code here:
        lblSportDepartment.setText("Department");
        lblMajorPosition.setText("Position");
    }//GEN-LAST:event_staffBtnActionPerformed

    private void studentBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentBtnActionPerformed
        // TODO add your handling code here:
        lblSportDepartment.setText("Sport Team");
        lblMajorPosition.setText("Major");
    }//GEN-LAST:event_studentBtnActionPerformed
    /**
     * Clears the text fields and selected radio button groups when the clear
     * button is clicked.
     *
     * @author Danial Alajmi
     */

    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        textFields.add(txtFirstName);
        textFields.add(txtSurname);
        textFields.add(txtAdress);
        textFields.add(txtPhone);
        textFields.add(txtDob);
        textFields.add(txtMajorOrPosition);
        textFields.add(txtSportTeamOrDepartment);
        clearTextFields(textFields);
        genderButtonGroup.clearSelection();
        memberTypeGroupButton.clearSelection();
    }//GEN-LAST:event_clearBtnActionPerformed

    private void dashboardBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dashboardBtnActionPerformed
        cardLayout.show(pnlCards, "dashboardPnl");
    }//GEN-LAST:event_dashboardBtnActionPerformed

    private void addEmployeeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeButtonActionPerformed
        actionPerformed(evt);
        cardLayout.show(pnlCards, "addEmployeePnl");
    }//GEN-LAST:event_addEmployeeButtonActionPerformed

    private void manageEmployeesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageEmployeesButtonActionPerformed
        actionPerformed(evt);
        populateEmployeesTable();
        cardLayout.show(pnlCards, "manageEmployeesPnl");
    }//GEN-LAST:event_manageEmployeesButtonActionPerformed

    private void listTrainersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listTrainersButtonActionPerformed
        populateTrainersTable();
        cardLayout.show(pnlCards, "listPersonalTrainerPnl");
    }//GEN-LAST:event_listTrainersButtonActionPerformed

    private void addMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberButtonActionPerformed
        actionPerformed(evt);
        cardLayout.show(pnlCards, "addMemberPnl");
    }//GEN-LAST:event_addMemberButtonActionPerformed

    private void manageMemberButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageMemberButtonActionPerformed
        actionPerformed(evt);
        populateMembersTable();
        cardLayout.show(pnlCards, "manageMembersPnl");
    }//GEN-LAST:event_manageMemberButtonActionPerformed
    /**
     * Assigns a personal trainer to each member and displays the information in
     * a table. The table shows member ID, full name, member type, and assigned
     * trainer's full name and ID. If a member does not have an assigned
     * trainer, the table displays "(None)" for that member.
     *
     * @param evt The event object representing the action event
     * @author Ali Jasim
     */
    private void assignTrainerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignTrainerButtonActionPerformed
        actionPerformed(evt);
        assignTrainerComboBox();
        for (Member mem : GymSystem.members) {
            boolean found = false;
            String name = null;
            int id = 0;
            for (Employee emp : GymSystem.employees) {
                if (emp instanceof PersonalTrainer) {

                    for (Member empFound : ((PersonalTrainer) emp).getMembers()) {
                        if (empFound.getId() == mem.getId()) {
                            found = true;
                            name = emp.getFullName();
                            id = emp.getId();
                            break;
                        }
                    }
                }
            }

            if (found) {
                if (mem instanceof PolytechnicStaff) {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", name + " (" + id + ")"});
                } else {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", name + " (" + id + ")"});

                }
            } else if (!found) {
                if (mem instanceof PolytechnicStaff) {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", "(None)"});
                } else {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", "(None)"});

                }
            }

        }

        cardLayout.show(pnlCards, "assignTrainerPnl");
    }//GEN-LAST:event_assignTrainerButtonActionPerformed
    /**
     * Generates a marketing report and displays a message to the user when the
     * report is generated. The method shows the "testing" card in the card
     * layout after generating the report.
     *
     * @param evt The event object representing the action event
     * @author Hawra Fardan
     *
     */
    private void marketingReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marketingReportBtnActionPerformed
        FileManager.getInstance().generateMarketingReport();
        Message obj = new Message();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
            }
        });
        obj.jLabel1.setText("Report have been generated");
        obj.jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/noteMassageIcon.png"))); // NOI18N
        GlassPanePopup.showPopup(obj);
        cardLayout.show(pnlCards, "testing");
    }//GEN-LAST:event_marketingReportBtnActionPerformed

    private void clearEmployeeFormBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearEmployeeFormBtnActionPerformed
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        textFields.add(txtFirstNameEmployee);
        textFields.add(txtSurnameEmployee);
        textFields.add(txtAddressEmployee);
        textFields.add(txtPhoneEmployee);
        textFields.add(txtSalaryEmployee);
        clearTextFields(textFields);
        employeeTypeBtnGroup.clearSelection();
    }//GEN-LAST:event_clearEmployeeFormBtnActionPerformed
    /**
     * Adds a new employee to the system. Validates the input fields and
     * employee type before adding the employee. If the input is valid, the
     * employee is added, and the saveEmployee() method is called. If an
     * exception occurs, it is logged.
     *
     * @param evt The event object representing the action event
     * @author Hasan Khadem & Hawra Fardan
     *
     */
    private void addEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEmployeeBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        String[] errors = {"first name", "sur name", "Address", "Phone", "Salary"};
        textFields.add(txtFirstNameEmployee);
        textFields.add(txtSurnameEmployee);
        textFields.add(txtAddressEmployee);
        textFields.add(txtPhoneEmployee);
        textFields.add(txtSalaryEmployee);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
        }
        if (!checkRadioButtonGroup(employeeTypeBtnGroup, "Employee type")) {
            return;
        }

        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!containsOnlyLetters(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
            if (errorCoutner == 2) {
                break;
            }
        }
        for (int i = 3; i < textFields.size(); i++) {
            if (!containsOnlyNumbers(textFields.get(i), errors[i])) {
                return;
            }
        }

        addEmployee(textFields);
        try {
            FileManager.getInstance().writeEmployee();
            Employee.saveEmpCount();
            clearTextFields(textFields);
            employeeTypeBtnGroup.clearSelection();
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_addEmployeeBtnActionPerformed

    private void repaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_repaintShadowForTextFields
        repaitShadow(evt.getSource());
    }//GEN-LAST:event_repaintShadowForTextFields

    private void pickDateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDateBtnActionPerformed
        dateChooser.setTextRefernce(txtDob);
        dateChooser.showPopup();
        SelectedDate d = dateChooser.getSelectedDate();
    }//GEN-LAST:event_pickDateBtnActionPerformed
    /**
     * Adds a new member to the system. Validates the input fields and member
     * type before adding the member. If the input is valid, the member is
     * added, and the saveMember() method is called. If an exception occurs, it
     * is logged.
     *
     * @param evt The event object representing the action event
     * @author Hasan Khadem
     */
    private void addMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemberBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        ArrayList<String> errors = new ArrayList<String>(Arrays.asList("first name", "sur name", "Address", "Phone", "Date of birth"));
        textFields.add(txtFirstName);
        textFields.add(txtSurname);
        textFields.add(txtAdress);
        textFields.add(txtPhone);
        textFields.add(txtDob);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        if (!checkRadioButtonGroup(genderButtonGroup, "Gender")) {
            return;
        }
        if (!checkRadioButtonGroup(memberTypeGroupButton, "Member type")) {
            return;
        }

        textFields.add(txtMajorOrPosition);
        if (studentBtn.isSelected()) {
            errors.add("Major");
        } else {
            textFields.add(txtSportTeamOrDepartment);
            errors.add("Position");
            errors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        ArrayList<TextField> letterTextFields = new ArrayList<TextField>();
        letterTextFields.add(txtFirstName);
        letterTextFields.add(txtSurname);
        letterTextFields.add(txtMajorOrPosition);
        letterTextFields.add(txtSportTeamOrDepartment);
        ArrayList<String> letterErrors = new ArrayList<String>(Arrays.asList("first name", "sur name"));
        if (studentBtn.isSelected()) {
            letterErrors.add("Major");
            letterErrors.add("Sport Team");
        } else {
            letterErrors.add("Position");
            letterErrors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : letterTextFields) {
            if (!containsOnlyLetters(textField, letterErrors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;

        }

        if (!containsOnlyNumbers(txtPhone, "Phone")) {
            return;
        }

        textFields = new ArrayList<TextField>();
        textFields.add(txtFirstName);
        textFields.add(txtSurname);
        textFields.add(txtAdress);
        textFields.add(txtPhone);
        textFields.add(txtDob);
        textFields.add(txtMajorOrPosition);
        textFields.add(txtSportTeamOrDepartment);
        addMember(textFields);

        try {
            FileManager.getInstance().writeMember();
            Member.saveEmpCount();
            clearTextFields(textFields);
            genderButtonGroup.clearSelection();
            memberTypeGroupButton.clearSelection();
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_addMemberBtnActionPerformed

    private void txtDobMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDobMouseClicked
        repaitShadow(evt.getSource());
        dateChooser.setTextRefernce(txtDob);
        dateChooser.showPopup();
        SelectedDate d = dateChooser.getSelectedDate();
    }//GEN-LAST:event_txtDobMouseClicked

    private void editEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editEmployeeBtnActionPerformed
        if (employeesTable.getSelectedRow() != -1) {
            Employee empFound = getEmpByID();
//                    Employee emp = GymSystem.employees.get(employeesTable.getSelectedRow());
            txtFirstNameEmployeeEdit.setText(empFound.getFirstName());
            txtSurnameEmployeeEdit.setText(empFound.getLastName());
            txtAddressEmployeeEdit.setText(empFound.getAddress());
            txtPhoneEmployeeEdit.setText(empFound.getPhone());
            txtSalaryEmployeeEdit.setText(String.valueOf(empFound.getSalary()));
            if (empFound instanceof PersonalTrainer) {
                trainerRadioBtnEdit.setSelected(true);
            } else {
                employeeRadioBtnEdit.setSelected(true);
            }
            cardLayout.show(pnlCards, "editEmployeePnl");
        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            txtSearchEmp.setText("Search by ID or Name");
            populateEmployeesTable();
            obj.jLabel1.setText("<html>Please Select an employee From the table to edit.</html>");
            GlassPanePopup.showPopup(obj);
        }
    }//GEN-LAST:event_editEmployeeBtnActionPerformed
    /**
     * Exits the application and saves employees and members before exiting. If
     * an exception occurs during the saving process, it is logged.
     *
     * @param evt The event object representing the action event
     * @author Danial Alajmi
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        try {
            FileManager.getInstance().writeEmployee();
            FileManager.getInstance().writeMember();
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.exit(0);
    }//GEN-LAST:event_exitBtnActionPerformed
    /**
     * Saves the edited employee information after validating the input fields.
     * If the input is valid and the selected employee exists, the employee's
     * information is updated, and the FileManager's writeEmployee() method is
     * called. If an exception occurs during the saving process, it is logged.
     * After the update, a message is displayed to inform the user that the data
     * has been updated.
     *
     * @param evt The event object representing the action event
     * @author Hasan Khadem & Hawra Fardan
     *
     */

    private void saveEmployeeEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveEmployeeEditBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        String[] errors = {"first name", "sur name", "Address", "Phone", "Salary"};
        textFields.add(txtFirstNameEmployeeEdit);
        textFields.add(txtSurnameEmployeeEdit);
        textFields.add(txtAddressEmployeeEdit);
        textFields.add(txtPhoneEmployeeEdit);
        textFields.add(txtSalaryEmployeeEdit);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
        }

        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!containsOnlyLetters(textField, errors[errorCoutner])) {
                return;
            }
            errorCoutner++;
            if (errorCoutner == 2) {
                break;
            }
        }
        for (int i = 3; i < textFields.size(); i++) {
            if (!containsOnlyNumbers(textFields.get(i), errors[i])) {
                return;
            }
        }
        if (employeesTable.getSelectedRow() != -1) {
            Employee empFound = getEmpByID();
            empFound.setFirstName(txtFirstNameEmployeeEdit.getText());
            empFound.setLastName(txtSurnameEmployeeEdit.getText());
            empFound.setAddress(txtAddressEmployeeEdit.getText());
            empFound.setPhone(txtPhoneEmployeeEdit.getText());
            empFound.setSalary(Double.parseDouble(txtSalaryEmployeeEdit.getText()));
            try {
                FileManager.getInstance().writeEmployee();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Message obj = new Message();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
                populateEmployeesTable();
                cardLayout.show(pnlCards, "manageEmployeesPnl");

            }
        });
        obj.jLabel1.setText("Data has been updated");
        GlassPanePopup.showPopup(obj);
    }//GEN-LAST:event_saveEmployeeEditBtnActionPerformed

    private void backEmployeeEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backEmployeeEditBtnActionPerformed
        cardLayout.show(pnlCards, "manageEmployeesPnl");
    }//GEN-LAST:event_backEmployeeEditBtnActionPerformed
    /**
     * Deletes the selected employee from the employees list and updates the
     * table. If an employee is selected, the employee is removed from the list,
     * and the FileManager's writeEmployee() method is called to update the
     * saved data. If an exception occurs during the saving process, it is
     * logged. If no employee is selected, a message is displayed to inform the
     * user to select an employee.
     *
     * @param evt The event object representing the action event
     * @author Ali Jasim
     */
    private void deleteEmployeeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteEmployeeBtnActionPerformed
        if (employeesTable.getSelectedRow() != -1) {
            Employee empFound = getEmpByID();

            GymSystem.employees.remove(empFound);
            populateEmployeesTable();
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("An Employee has been removed");
            GlassPanePopup.showPopup(obj);

            try {
                FileManager.getInstance().writeEmployee();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("<html>Please Select an employee From the table to remove.</html>");
            GlassPanePopup.showPopup(obj);
        }

    }//GEN-LAST:event_deleteEmployeeBtnActionPerformed

    private void txtSearchEmpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchEmpKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) employeesTable.getModel();

        tableModel.setRowCount(0);
        for (Employee emp : GymSystem.employees) {

            String type = emp instanceof PersonalTrainer ? "Personal Trainer" : "Regular";
            String id = "" + emp.getId();
            String name = emp.getFullName();
            if (txtSearchEmp.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchEmp.getText().toLowerCase())) {
                employeesTable.addRow(new Object[]{id, name, type});
            }

        }    }//GEN-LAST:event_txtSearchEmpKeyReleased

    private void txtSearchMemberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchMemberKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) membersTable.getModel();

        tableModel.setRowCount(0);
        for (Member mem : GymSystem.members) {

            String type = mem instanceof PolytechnicStaff ? "Polytechnic Staff" : "Polytechnic Student";
            String id = "" + mem.getId();
            String name = mem.getFullName();
            if (txtSearchMember.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchMember.getText().toLowerCase())) {
                membersTable.addRow(new Object[]{id, name, type});
            }
        }
    }//GEN-LAST:event_txtSearchMemberKeyReleased
    /**
     * Prepares the member editing form with the selected member's information.
     * If a member is selected from the table, the member's information is
     * retrieved, and the edit form is populated with the member's data. If no
     * member is selected, a message is displayed to inform the user to select a
     * member.
     *
     * @param evt The event object representing the action event
     * @author Hasan Khadem & Hawra Fardan
     */
    private void editMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editMemberBtnActionPerformed
        if (membersTable.getSelectedRow() != -1) {
            Member membFound = getMemByID();
            txtFirstNameMemberEdit.setText(membFound.getFirstName());
            txtSurNameMemberEdit.setText(membFound.getLastName());
            txtAdressMemberEdit.setText(membFound.getAddress());
            txtPhoneMemberEdit.setText(membFound.getPhone());
            txtDobEdit.setText(membFound.getBirthDate());
            if (membFound.getGender().equalsIgnoreCase("Male")) {
                maleEditBtn.setSelected(true);
            } else {
                femaleEditBtn.setSelected(true);
            }

            if (membFound instanceof PolytechnicStudent) {
                studentEditBtn.setSelected(true);
                lblMajorPositionEdit.setText("Major");
                lblSportDepartmentEdit.setText("Sport Team");
                txtMajorOrPositionEdit.setText(((PolytechnicStudent) membFound).getMajor());
                txtSportTeamOrDepartmentEdit.setText(((PolytechnicStudent) membFound).getTeam());
            } else {
                staffEditBtn.setSelected(true);
                lblMajorPositionEdit.setText("Position");
                lblSportDepartmentEdit.setText("Department");
                txtMajorOrPositionEdit.setText(((PolytechnicStaff) membFound).getPosition());
                txtSportTeamOrDepartmentEdit.setText(((PolytechnicStaff) membFound).getDepartment());
            }
            cardLayout.show(pnlCards, "editMemberPnl");
        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            txtSearchMember.setText("Search by ID or Name");
            populateMembersTable();
            obj.jLabel1.setText("<html>Please Select a member From the table to edit.</html>");
            GlassPanePopup.showPopup(obj);
        }    }//GEN-LAST:event_editMemberBtnActionPerformed
    /**
     * Deletes the selected member from the members list and updates the table.
     * If a member is selected, the member is removed from the list, and the
     * FileManager's writeMember() method is called to update the saved data. If
     * an exception occurs during the saving process, it is logged. If no member
     * is selected, a message is displayed to inform the user to select a
     * member.
     *
     * @param evt The event object representing the action event
     * @author Ali Jasim
     */
    private void deleteMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMemberBtnActionPerformed
        if (membersTable.getSelectedRow() != -1) {
            Member memFound = getMemByID();

            GymSystem.members.remove(memFound);
            populateMembersTable();
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("A Member has been removed");
            GlassPanePopup.showPopup(obj);

            try {
                FileManager.getInstance().writeMember();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("<html>Please Select a member From the table to remove.</html>");
            GlassPanePopup.showPopup(obj);
        }
    }//GEN-LAST:event_deleteMemberBtnActionPerformed
    /**
     * Validates the input fields and updates the member's information in the
     * members list. It checks for the validity of the input fields, such as
     * checking if the fields contain only letters, numbers, and specific error
     * messages. If any of these checks fail, the method returns immediately
     * without updating the member's information. If all the input fields are
     * valid, the member's information is updated and the table is populated
     * with the updated data.
     *
     * @param evt The event object representing the action event
     * @author Hasan Khadem
     */
    private void saveMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMemberBtnActionPerformed
        int errorCoutner;
        ArrayList<TextField> textFields = new ArrayList<TextField>();
        ArrayList<String> errors = new ArrayList<String>(Arrays.asList("first name", "sur name", "Address", "Phone", "Date of birth"));
        textFields.add(txtFirstNameMemberEdit);
        textFields.add(txtSurNameMemberEdit);
        textFields.add(txtAdressMemberEdit);
        textFields.add(txtPhoneMemberEdit);
        textFields.add(txtDobEdit);
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        if (!checkRadioButtonGroup(genderButtonGroupEdit, "Gender")) {
            return;
        }

        textFields.add(txtMajorOrPositionEdit);
        if (studentBtn.isSelected()) {
            errors.add("Major");
        } else {
            textFields.add(txtSportTeamOrDepartmentEdit);
            errors.add("Position");
            errors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : textFields) {
            if (!checkTxtField(textField, errors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;
        }

        ArrayList<TextField> letterTextFields = new ArrayList<TextField>();
        letterTextFields.add(txtFirstNameMemberEdit);
        letterTextFields.add(txtSurNameMemberEdit);
        letterTextFields.add(txtMajorOrPositionEdit);
        letterTextFields.add(txtSportTeamOrDepartmentEdit);
        ArrayList<String> letterErrors = new ArrayList<String>(Arrays.asList("first name", "sur name"));
        if (studentEditBtn.isSelected()) {
            letterErrors.add("Major");
            letterErrors.add("Sport Team");
        } else {
            letterErrors.add("Position");
            letterErrors.add("Depatment");
        }
        errorCoutner = 0;
        for (TextField textField : letterTextFields) {
            if (!containsOnlyLetters(textField, letterErrors.get(errorCoutner))) {
                return;
            }
            errorCoutner++;

        }

        if (!containsOnlyNumbers(txtPhoneMemberEdit, "Phone")) {
            return;
        }
        if (membersTable.getSelectedRow() != -1) {
            Member membFound = getMemByID();
            membFound.setFirstName(txtFirstNameMemberEdit.getText());
            membFound.setLastName(txtSurNameMemberEdit.getText());
            membFound.setAddress(txtAdressMemberEdit.getText());
            membFound.setPhone(txtPhoneMemberEdit.getText());
            membFound.setBirthDate(txtDobEdit.getText());

            if (membFound instanceof PolytechnicStudent) {
                ((PolytechnicStudent) membFound).setMajor(txtMajorOrPositionEdit.getText());
                ((PolytechnicStudent) membFound).setTeam(txtSportTeamOrDepartmentEdit.getText());
            } else {
                ((PolytechnicStaff) membFound).setPosition(txtMajorOrPositionEdit.getText());
                ((PolytechnicStaff) membFound).setDepartment(txtSportTeamOrDepartmentEdit.getText());
            }
            String gender = maleEditBtn.isSelected() ? "Male" : "Female"; //ternary operator
            membFound.setGender(gender);
            try {
                FileManager.getInstance().writeMember();
            } catch (IOException ex) {
                Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        Message obj = new Message();
        obj.eventOK(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent ae) {
                GlassPanePopup.closePopupLast();
                populateMembersTable();
                cardLayout.show(pnlCards, "manageMembersPnl");

            }
        });
        obj.jLabel1.setText("Data has been updated");
        GlassPanePopup.showPopup(obj);

        try {
            FileManager.getInstance().writeMember();

        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_saveMemberBtnActionPerformed

    private void backMemberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backMemberBtnActionPerformed
        populateMembersTable();
        cardLayout.show(pnlCards, "manageMembersPnl");
    }//GEN-LAST:event_backMemberBtnActionPerformed

    private void txtDobEditMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtDobEditMouseClicked
        repaitShadow(evt.getSource());
    }//GEN-LAST:event_txtDobEditMouseClicked

    private void pickDateBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pickDateBtn1ActionPerformed
        dateChooserEdit.showPopup();
    }//GEN-LAST:event_pickDateBtn1ActionPerformed

    private void editMemberPnlrepaintShadowForTextFields(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_editMemberPnlrepaintShadowForTextFields
        // TODO add your handling code here:
    }//GEN-LAST:event_editMemberPnlrepaintShadowForTextFields

    private void txtSearchMemberTrainerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchMemberTrainerKeyReleased
        assignTrainerComboBox();
        for (Member mem : GymSystem.members) {
            boolean found = false;
            String name = null;
            int id = 0;
            if (txtSearchMemberTrainer.getText().equalsIgnoreCase(mem.getId() + "") || mem.getFullName().toLowerCase().contains(txtSearchMemberTrainer.getText().toLowerCase())) {
                for (Employee emp : GymSystem.employees) {
                    if (emp instanceof PersonalTrainer) {

                        for (Member empFound : ((PersonalTrainer) emp).getMembers()) {
                            if (empFound.getId() == mem.getId()) {
                                found = true;
                                name = emp.getFullName();
                                id = emp.getId();
                                break;
                            }
                        }
                    }
                }
                if (found) {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", name + " (" + id + ")"});
                } else if (!found) {
                    membersAssignTrainerTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", "(None)"});
                }
            }
        }
    }//GEN-LAST:event_txtSearchMemberTrainerKeyReleased

    private void txtSearchTrainerMemberKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTrainerMemberKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) trainerMembersTable.getModel();

        tableModel.setRowCount(0);
        PersonalTrainer empFound = null;
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                String idString = String.valueOf(personalTrainerTable.getValueAt(personalTrainerTable.getSelectedRow(), 0));
                String empIDString = "" + emp.getId();
                if (empIDString.equals(idString)) {
                    empFound = (PersonalTrainer) emp;
                    break;
                }
            }
        }
        for (Member mem : empFound.getMembers()) {

            String type = mem instanceof PolytechnicStaff ? "Polytechnic Staff" : "Polytechnic Student";
            String id = "" + mem.getId();
            String name = mem.getFullName();
            if (txtSearchTrainerMember.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchTrainerMember.getText().toLowerCase())) {
                trainerMembersTable.addRow(new Object[]{id, name, type, mem.getPhone()});
            }
        }
    }//GEN-LAST:event_txtSearchTrainerMemberKeyReleased

    private void deleteMemberBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMemberBtn1ActionPerformed
        cardLayout.show(pnlCards, "listPersonalTrainerPnl");
    }//GEN-LAST:event_deleteMemberBtn1ActionPerformed

    private void txtSearchTrainerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchTrainerKeyReleased
        DefaultTableModel tableModel = (DefaultTableModel) personalTrainerTable.getModel();

        tableModel.setRowCount(0);
        for (Employee emp : GymSystem.employees) {
            String id = "" + emp.getId();
            String name = emp.getFullName();
            if (emp instanceof PersonalTrainer) {
                if (txtSearchTrainer.getText().equalsIgnoreCase(id) || name.toLowerCase().contains(txtSearchTrainer.getText().toLowerCase())) {
                    personalTrainerTable.addRow(new Object[]{id, name, ((PersonalTrainer) emp).getMembers().size()});
                }
            }
        }
    }//GEN-LAST:event_txtSearchTrainerKeyReleased

    private void personalTrainerTableMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_personalTrainerTableMouseReleased
        populateTrainerMembersTable();
        cardLayout.show(pnlCards, "trainerMembersPnl");
    }//GEN-LAST:event_personalTrainerTableMouseReleased
    /**
     * Assigns or unassigns a Personal Trainer to a member when the
     * assignedTrainerComboBox loses focus. The method creates a list of
     * Personal Trainers from the employees list and checks if a member is
     * selected in the membersAssignTrainerTable. If a member is selected and a
     * Personal Trainer is chosen in the assignedTrainerComboBox, the member is
     * reassigned to the selected Personal Trainer. If no Personal Trainer is
     * chosen, the member is unassigned from their current Personal Trainer.
     * After any changes, the FileManager's writeEmployee() and readEmployees()
     * methods are called to update the saved data. If an exception occurs
     * during the saving or reading process, it is logged.
     *
     * @param evt The event object representing the focus event
     * @author Ali Jasim
     */
    private void assignedTrainerComboBoxFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_assignedTrainerComboBoxFocusLost
        ArrayList<PersonalTrainer> PS = new ArrayList<PersonalTrainer>();
        PS.removeAll(PS);
        boolean found = false;
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                PS.add((PersonalTrainer) emp);
            }
        }
        Member selectedMember = null;
        if (membersAssignTrainerTable.getSelectedRow() != -1) {
            selectedMember = getMemTrainerByID();
        }
        if (membersAssignTrainerTable.getSelectedRow() != -1) {
            if (assignedTrainerComboBox.getSelectedIndex() >= 1 && membersAssignTrainerTable.getValueAt(membersAssignTrainerTable.getSelectedRow(), 3) != "(None)") {
                for (PersonalTrainer ps : PS) {
                    for (Member empFound : ps.getMembers()) {
                        if (selectedMember.getId() == empFound.getId()) {
                            ps.getMembers().remove(empFound);
                            Message obj = new Message();
                            obj.eventOK(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent ae) {
                                    GlassPanePopup.closePopupLast();
                                }
                            });
                            obj.jLabel1.setText("<html>" + empFound.getFullName() + " has been reasigned to " + PS.get(assignedTrainerComboBox.getSelectedIndex() - 1).getFullName() + ".</html>");
                            GlassPanePopup.showPopup(obj);
                            found = true;
                            break;
                        }
                    }

                }
                PS.get(assignedTrainerComboBox.getSelectedIndex() - 1).getMembers().add(selectedMember);

                if (!found) {
                    Message obj = new Message();
                    obj.eventOK(new ActionListener() {
                        @Override
                        public void actionPerformed(ActionEvent ae) {
                            GlassPanePopup.closePopupLast();
                        }
                    });
                    obj.jLabel1.setText("<html>" + selectedMember.getFullName() + " has been asigned to " + PS.get(assignedTrainerComboBox.getSelectedIndex() - 1).getFullName() + ".</html>");
                    GlassPanePopup.showPopup(obj);
                }
            } else {
                for (PersonalTrainer ps : PS) {
                    for (Member empFound : ps.getMembers()) {
                        if (selectedMember.getId() == empFound.getId()) {
                            ps.getMembers().remove(empFound);
                            Message obj = new Message();
                            obj.eventOK(new ActionListener() {
                                @Override
                                public void actionPerformed(ActionEvent ae) {
                                    GlassPanePopup.closePopupLast();
                                }
                            });
                            obj.jLabel1.setText("<html>Personal Trainer has been removed from " + membersAssignTrainerTable.getValueAt(membersAssignTrainerTable.getSelectedRow(), 1) + "</html>");
                            GlassPanePopup.showPopup(obj);
                            break;
                        }
                    }
                }

            }
        }

        try {
            FileManager.getInstance().writeEmployee();
            FileManager.getInstance().readEmployees();
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }    }//GEN-LAST:event_assignedTrainerComboBoxFocusLost
    /**
     * Loads the startup file data when the form window is opened. This method
     * is called when the window is opened, and it attempts to load the startup
     * file data using FileManager's loadStartupFile() method. If the loading is
     * successful, the oneTimeMsg() method is called with the loaded data. If an
     * exception occurs during the loading process, it is logged.
     *
     * @param evt The event object representing the window event
     * @author Hawra Fardan
     */
    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        try {
            Member.loadEmpCount();
            Employee.loadEmpCount();
            Employee.saveEmpCount();
            Member.saveEmpCount();
            oneTimeMsg(FileManager.getInstance().loadStartupFile());
        } catch (IOException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowOpened

    private void placeHolderRemove(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_placeHolderRemove
        if (((TextField) evt.getSource()).getText().equals("Search by ID or Name")) {
            ((TextField) evt.getSource()).setText("");
        }
    }//GEN-LAST:event_placeHolderRemove

    private void placeHolderCheck(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_placeHolderCheck
        if (((TextField) evt.getSource()).getText().equals("")) {
            ((TextField) evt.getSource()).setText("Search by ID or Name");
        }    }//GEN-LAST:event_placeHolderCheck

    private void txtSearchEmpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchEmpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchEmpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new MainPage().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(MainPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private GUI.Button addEmployeeBtn;
    private GUI.NavButton addEmployeeButton;
    private javax.swing.JButton addEmployeeImageBtn;
    private javax.swing.JPanel addEmployeePnl;
    private GUI.Button addMemberBtn;
    private GUI.NavButton addMemberButton;
    private javax.swing.JButton addMemberImageBtn;
    private javax.swing.JPanel addMemberPnl;
    private GUI.NavButton assignTrainerButton;
    private javax.swing.JButton assignTrainerImageBtn;
    private javax.swing.JPanel assignTrainerPnl;
    private ComboBox.ComboBoxSuggestion assignedTrainerComboBox;
    private GUI.Button backEmployeeEditBtn;
    private GUI.Button backMemberBtn;
    private javax.swing.JLabel bahrainLabel;
    private GUI.Button clearBtn;
    private GUI.Button clearEmployeeFormBtn;
    private GUI.NavButton dashboardBtn;
    private javax.swing.JPanel dashboardPnl;
    private Calander.DateChooser dateChooser;
    private Calander.DateChooser dateChooserEdit;
    private GUI.Button deleteEmployeeBtn;
    private GUI.Button deleteMemberBtn;
    private GUI.Button deleteMemberBtn1;
    private GUI.Button editEmployeeBtn;
    private javax.swing.JPanel editEmployeePnl;
    private GUI.Button editMemberBtn;
    private javax.swing.JPanel editMemberPnl;
    private javax.swing.JLabel emoployeeSectionLabel;
    private GUI.RadioButtonCustom employeeRadioBtn;
    private GUI.RadioButtonCustom employeeRadioBtnEdit;
    private javax.swing.ButtonGroup employeeTypeBtnGroup;
    private Table.Table employeesTable;
    private GUI.Button exitBtn;
    private javax.swing.JRadioButton femaleBtn;
    private javax.swing.JRadioButton femaleEditBtn;
    private javax.swing.ButtonGroup genderButtonGroup;
    private javax.swing.ButtonGroup genderButtonGroupEdit;
    private javax.swing.JLabel gymImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblMajorPosition;
    private javax.swing.JLabel lblMajorPositionEdit;
    private javax.swing.JLabel lblSearchIcon;
    private javax.swing.JLabel lblSearchIcon3;
    private javax.swing.JLabel lblSportDepartment;
    private javax.swing.JLabel lblSportDepartmentEdit;
    private javax.swing.JLabel lblTrainerName;
    private javax.swing.JPanel listPersonalTrainerPnl;
    private GUI.NavButton listTrainersButton;
    private javax.swing.JSplitPane mainPage;
    private javax.swing.JRadioButton maleBtn;
    private javax.swing.JRadioButton maleEditBtn;
    private GUI.NavButton manageEmployeesButton;
    private javax.swing.JPanel manageEmployeesPnl;
    private GUI.NavButton manageMemberButton;
    private javax.swing.JPanel manageMemberssPnl;
    private GUI.NavButton marketingReportBtn;
    private javax.swing.JLabel memberSectionLabel;
    private javax.swing.ButtonGroup memberTypeGroupButton;
    private Table.Table membersAssignTrainerTable;
    private Table.Table membersTable;
    private javax.swing.JPanel nvigPnl;
    private Table.Table personalTrainerTable;
    private GUI.Button pickDateBtn;
    private GUI.Button pickDateBtn1;
    private javax.swing.JPanel pnlCards;
    private javax.swing.JLabel polyLabel;
    private GUI.RoundPanel roundPanel1;
    private GUI.RoundPanel roundPanel10;
    private GUI.RoundPanel roundPanel3;
    private GUI.RoundPanel roundPanel4;
    private GUI.RoundPanel roundPanel5;
    private GUI.RoundPanel roundPanel6;
    private GUI.RoundPanel roundPanel7;
    private GUI.RoundPanel roundPanel8;
    private GUI.RoundPanel roundPanel9;
    private GUI.Button saveEmployeeEditBtn;
    private GUI.Button saveMemberBtn;
    private javax.swing.JRadioButton staffBtn;
    private javax.swing.JRadioButton staffEditBtn;
    private javax.swing.JRadioButton studentBtn;
    private javax.swing.JRadioButton studentEditBtn;
    private javax.swing.JPanel trainerMembersPnl;
    private Table.Table trainerMembersTable;
    private GUI.RadioButtonCustom trainerRadioBtn;
    private GUI.RadioButtonCustom trainerRadioBtnEdit;
    private javax.swing.JButton truckEmployeeInformationImageBtn;
    private javax.swing.JButton truckMemberInformationImageBtn;
    private GUI.TextField txtAddressEmployee;
    private GUI.TextField txtAddressEmployeeEdit;
    private GUI.TextField txtAdress;
    private GUI.TextField txtAdressMemberEdit;
    private GUI.TextField txtDob;
    private GUI.TextField txtDobEdit;
    private GUI.TextField txtFirstName;
    private GUI.TextField txtFirstNameEmployee;
    private GUI.TextField txtFirstNameEmployeeEdit;
    private GUI.TextField txtFirstNameMemberEdit;
    private GUI.TextField txtMajorOrPosition;
    private GUI.TextField txtMajorOrPositionEdit;
    private GUI.TextField txtPhone;
    private GUI.TextField txtPhoneEmployee;
    private GUI.TextField txtPhoneEmployeeEdit;
    private GUI.TextField txtPhoneMemberEdit;
    private GUI.TextField txtSalaryEmployee;
    private GUI.TextField txtSalaryEmployeeEdit;
    private GUI.TextField txtSearchEmp;
    private GUI.TextField txtSearchMember;
    private GUI.TextField txtSearchMemberTrainer;
    private GUI.TextField txtSearchTrainer;
    private GUI.TextField txtSearchTrainerMember;
    private GUI.TextField txtSportTeamOrDepartment;
    private GUI.TextField txtSportTeamOrDepartmentEdit;
    private GUI.TextField txtSurNameMemberEdit;
    private GUI.TextField txtSurname;
    private GUI.TextField txtSurnameEmployee;
    private GUI.TextField txtSurnameEmployeeEdit;
    // End of variables declaration//GEN-END:variables

    /**
     * Checks if the given TextField is empty or null, and displays an error
     * message if needed.
     *
     * @author Hasan Khadem
     * @param textField The TextField to be checked
     * @param error The error message to be displayed if the TextField is empty
     * or null
     * @return true if the TextField is not empty or null, false otherwise
     */
    public boolean checkTxtField(TextField textField, String error) {
        if (textField.getText().isEmpty() || textField.getText() == null) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                    textField.setShadowColor(Color.red);
                    textField.requestFocus();
                }
            });
            obj.jLabel1.setText("Please fill the " + error + " text field.");
            GlassPanePopup.showPopup(obj);
            return false;
        }
        return true;
    }

    /**
     * Checks if the given ButtonGroup has a selected radio button, and displays
     * an error message if needed.
     *
     * @author Hasan Khadem
     * @param buttonGroup The ButtonGroup to be checked
     * @param error The error message to be displayed if no radio button is
     * selected
     * @return true if a radio button is selected, false otherwise
     */
    public boolean checkRadioButtonGroup(ButtonGroup buttonGroup, String error) {
        if (buttonGroup.getSelection() == null) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Please Choose the " + error);
            GlassPanePopup.showPopup(obj);
            return false;
        }
        return true;
    }

    /**
     * Sets the shadow color of a TextField to gray if it has text content.
     *
     * @author Hasan Khadem
     * @param textField The TextField to repaint the shadow for
     */
    public void repaitShadow(Object textField) {
        Color gray = new Color(0, 0, 0);
        if (textField instanceof TextField) {
            if (((TextField) textField).getText() != null) {
                ((TextField) textField).setShadowColor(gray);
            }
        }
    }

    /**
     * Checks if a TextField contains only letters for the specified error and
     * position.
     *
     * @author Hasan Khadem
     * @param textField The TextField to check
     * @param error The error message to display if the TextField contains
     * non-letter characters
     * @return true if the TextField contains only letters, false otherwise
     */
    public boolean containsOnlyLetters(TextField textField, String error) {
        final Color DefaultC = new Color(170, 170, 170);
        final Color ErrorC = new Color(250, 0, 0);
        textField.setShadowColor(DefaultC);
        String str = textField.getText();
        boolean found = false;
        boolean twoWords = false;

        if (error.toLowerCase().equals("position") || error.toLowerCase().equals("department") || error.toLowerCase().equals("major")) {
            twoWords = true;
        }

        if (twoWords) {
            String[] words = str.split(" ");
            if (words.length < 1 || words.length > 2) {
                // Display an error message and highlight the TextField with an error color
                Message obj = new Message();
                obj.eventOK(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        GlassPanePopup.closePopupLast();
                        textField.setShadowColor(Color.red);
                        textField.requestFocus();
                    }
                });
                obj.jLabel1.setText("<html>The " + error + " text field should contain one or two words only.</html>");
                GlassPanePopup.showPopup(obj);
                textField.requestFocus();
                textField.setShadowColor(ErrorC);
                return false;
            }
            str = String.join("", words);
        }
        for (char c : str.toCharArray()) {
            if (!Character.isLetter(c) && !Character.isWhitespace(c)) {
                // Display an error message and highlight the TextField with an error color
                Message obj = new Message();
                obj.eventOK(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        GlassPanePopup.closePopupLast();
                        textField.setShadowColor(Color.red);
                        textField.requestFocus();
                    }
                });
                obj.jLabel1.setText("<html>The " + error + " text field should contain one word only.</html>");
                GlassPanePopup.showPopup(obj);
                found = true;
                textField.requestFocus();
                textField.setShadowColor(ErrorC);
                return false;
            }
        }
        return true;
    }

    /**
     * Checks if a TextField contains only numbers for the specified error.
     *
     * @author Hasan Khadem
     * @param textField The TextField to check
     * @param error The error message to display if the TextField contains
     * non-number characters
     * @return true if the TextField contains only numbers, false otherwise
     */
    public boolean containsOnlyNumbers(TextField textField, String error) {
        for (char c : textField.getText().toCharArray()) {
            if (!Character.isDigit(c) && c != '.' && textField.getText().charAt(0) != '+') {
                Message obj = new Message();
                obj.eventOK(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        GlassPanePopup.closePopupLast();
                        textField.setShadowColor(Color.red);
                        textField.requestFocus();
                    }
                });
                obj.jLabel1.setText("<html>The " + error + " text field should contain only numbers.</html>");
                GlassPanePopup.showPopup(obj);
                return false;
            }
        }
        return true;
    }

    //change navButton
    NavButton tempButton = null;
    Color darkBlue = new Color(2, 73, 89);

    /**
     * Changes the background color of a NavButton when it is clicked.
     *
     * @author Danial Alajmi
     * @param e The ActionEvent containing information about the action that
     * just occurred
     */
    @Override
    public void actionPerformed(ActionEvent e) {
        // Check if the source of the action event is a NavButton
        if (e.getSource() instanceof NavButton) {
            // Check if the background color of the dashboard button is set to dark blue
            if (dashboardBtn.getBackground().equals(darkBlue)) {
                // If the background color is dark blue, set it to another color
                dashboardBtn.setBackground(new Color(11, 158, 191));
                NavButton button = (NavButton) e.getSource();
                tempButton = button;
            }
            // If the background color of the dashboard button is not dark blue
            NavButton button = (NavButton) e.getSource();
            tempButton.setBackground(new Color(11, 158, 191));
            tempButton.setShadowColor(new Color(11, 158, 191));
            button.setBackground(darkBlue);
            button.setShadowColor(new Color(170, 170, 170));
            tempButton = button;
        }
    }

    /**
     * Adds an employee to the list of employees in the gym system.
     *
     * @author Hasan Khadem
     * @param textFields An ArrayList containing TextField components with
     * employee data
     */
    public void addEmployee(ArrayList<TextField> textFields) {
        try {
            Employee newEmp = null;
            if (employeeRadioBtn.isSelected()) {
                newEmp = new Employee(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), Double.parseDouble(textFields.get(4).getText()));
                System.out.println("emp");

            } else {
                newEmp = new PersonalTrainer(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), Double.parseDouble(textFields.get(4).getText()));
                System.out.println("ps");
            }
            GymSystem.employees.add(newEmp);

            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Employee has been added ");
            GlassPanePopup.showPopup(obj);

        } catch (Exception e) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Please check your input data");
            GlassPanePopup.showPopup(obj);
        }
    }

    /**
     * Adds a member to the list of members in the gym system.
     *
     * @author Hasan Khadem
     * @param textFields An ArrayList containing TextField components with
     * member data
     */
    public void addMember(ArrayList<TextField> textFields) {
        String gender = maleBtn.isSelected() ? "Male" : "Female"; //ternary operator
        String team = (!textFields.get(6).getText().isBlank() || !textFields.get(6).getText().isEmpty() || textFields.get(6).getText() != null) ? textFields.get(6).getText() : null;
        try {
            Member newMem = null;
            if (studentBtn.isSelected()) {
                newMem = new PolytechnicStudent(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), gender, textFields.get(4).getText(),
                        textFields.get(5).getText(), team);
                System.out.println("student");

            } else {
                newMem = new PolytechnicStaff(textFields.get(0).getText(), textFields.get(1).getText(),
                        textFields.get(2).getText(), textFields.get(3).getText(), gender, textFields.get(4).getText(),
                        textFields.get(5).getText(), textFields.get(6).getText());
                System.out.println("staff");
            }

            GymSystem.members.add(newMem);

            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Member has been added ");
            GlassPanePopup.showPopup(obj);
        } catch (Exception e) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();

                }
            });
            obj.jLabel1.setText("Please check your input data");
            GlassPanePopup.showPopup(obj);
        }
    }

    /**
     * Populates the employees table with data from the list of employees in the
     * gym system.
     *
     * @author Danial Alajmi employeesTable The JTable to be populated with
     * employee data
     */
    public void populateEmployeesTable() {
        DefaultTableModel model = (DefaultTableModel) employeesTable.getModel();
        model.setRowCount(0);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                employeesTable.addRow(new Object[]{emp.getId(), emp.getFullName(), "Personal Trainer"});
            } else {
                employeesTable.addRow(new Object[]{emp.getId(), emp.getFullName(), "Regular"});
            }
        }
    }

    /**
     * Populates the members table with data from the list of members in the gym
     * system.
     *
     * @author Danial Alajmi membersTable The JTable to be populated with member
     * data
     */
    public void populateMembersTable() {
        DefaultTableModel model = (DefaultTableModel) membersTable.getModel();
        model.setRowCount(0);
        for (Member mem : GymSystem.members) {
            if (mem instanceof PolytechnicStaff) {
                membersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff"});
            } else {
                membersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student"});
            }
        }
    }

    /**
     * Populates the trainerMembersTable with data from the members of a
     * selected PersonalTrainer in the gym system.
     *
     * @author Danial Alajmi trainerMembersTable The JTable to be populated with
     * trainer member data
     */
    public void populateTrainerMembersTable() {
        DefaultTableModel model = (DefaultTableModel) trainerMembersTable.getModel();
        model.setRowCount(0);
        PersonalTrainer empFound = null;
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                String idString = String.valueOf(personalTrainerTable.getValueAt(personalTrainerTable.getSelectedRow(), 0));
                String empIDString = "" + emp.getId();
                if (empIDString.equals(idString)) {
                    empFound = (PersonalTrainer) emp;
                    break;
                }
            }
        }
        for (Member mem : empFound.getMembers()) {
            if (mem instanceof PolytechnicStaff) {
                trainerMembersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Staff", mem.getPhone()});
            } else {
                trainerMembersTable.addRow(new Object[]{mem.getId(), mem.getFullName(), "Polytechnic Student", mem.getPhone()});
            }
        }
        lblTrainerName.setText("<html>" + empFound.getFullName() + " Members List</html>");
    }

    /**
     * Populates the personalTrainerTable with data from the personal trainers
     * in the gym system.
     *
     * @author Ali Jasim personalTrainerTable The Table to be populated with
     * personal trainer data
     */
    public void populateTrainersTable() {
        DefaultTableModel model = (DefaultTableModel) personalTrainerTable.getModel();
        model.setRowCount(0);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                personalTrainerTable.addRow(new Object[]{emp.getId(), emp.getFullName(), ((PersonalTrainer) emp).getMembers().size()});
            }
        }
    }

    /**
     * Clears the text fields in the given ArrayList of text fields.
     *
     * @author Danial Alajmi
     * @param textFields An ArrayList of TextField objects to clear
     */
    public void clearTextFields(ArrayList<TextField> textFields) {
        for (TextField textField : textFields) {
            textField.setText("");
        }
    }

    /**
     * Retrieves an Employee object from the gym system by its ID from the
     * selected row in the employeesTable.
     *
     * @author Hasan Khadem
     * @return The Employee object with the specified ID, or null if not found
     */
    public Employee getEmpByID() {
        int row = employeesTable.getSelectedRow();
        Object id = employeesTable.getModel().getValueAt(row, 0);
        String idString = id.toString();
        int idFound = Integer.parseInt(idString);

        for (Employee emp : GymSystem.employees) {
            if (emp.getId() == idFound) {
                return emp;
            }
        }
        return null;
    }

    /**
     * Retrieves a Member object from the gym system by its ID from the selected
     * row in the membersTable.
     *
     * @author Hasan Khadem
     * @return The Member object with the specified ID, or null if not found
     */
    public Member getMemByID() {
        int row = membersTable.getSelectedRow();
        Object id = membersTable.getModel().getValueAt(row, 0);
        String idString = id.toString();
        int idFound = Integer.parseInt(idString);

        for (Member mem : GymSystem.members) {
            if (mem.getId() == idFound) {
                return mem;
            }
        }
        return null;
    }

    /**
     * Retrieves a Member object from the Personal trainer list by its ID from
     * the selected row in the membersAssignTrainerTable.
     *
     * @author Hasan Khadem
     * @return The Member object with the specified ID, or null if not found
     */
    public Member getMemTrainerByID() {
        int row = membersAssignTrainerTable.getSelectedRow();
        Object id = membersAssignTrainerTable.getModel().getValueAt(row, 0);
        String idString = id.toString();
        int idFound = Integer.parseInt(idString);
        for (Member mem : GymSystem.members) {
            if (mem.getId() == idFound) {
                return mem;
            }
        }
        return null;
    }

    /**
     * Populates the assignedTrainerComboBox with available PersonalTrainer
     * objects from the GymSystem.employees list.
     *
     * @author Ali Jasim
     */
    public void assignTrainerComboBox() {
        assignedTrainerComboBox.removeAllItems();
        DefaultTableModel model = (DefaultTableModel) membersAssignTrainerTable.getModel();
        model.setRowCount(0);

        ArrayList<PersonalTrainer> PS = new ArrayList<PersonalTrainer>();
        PS.removeAll(PS);
        for (Employee emp : GymSystem.employees) {
            if (emp instanceof PersonalTrainer) {
                PS.add((PersonalTrainer) emp);
            }
        }
        assignedTrainerComboBox.addItem("(None)");
        for (PersonalTrainer emp : PS) {
            assignedTrainerComboBox.addItem(emp.getFullName() + " (" + emp.getId() + ")");
        }
    }

    /**
     * Displays a one-time message dialog when the application starts up and the
     * startup file has been populated.
     *
     * @param startupLoaded the result of the function in the FileManager class
     * @author Hawra Fardan
     */
    public void oneTimeMsg(boolean startupLoaded) {
        if (startupLoaded) {
            Message obj = new Message();
            obj.eventOK(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent ae) {
                    GlassPanePopup.closePopupLast();
                }
            });
            obj.jLabel1.setText("Start up File has been populated.");
            obj.jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/noteMassageIcon.png"))); // NOI18N
            GlassPanePopup.showPopup(obj);
        }
    }

}
